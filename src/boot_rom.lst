                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.8.0 #10562 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module boot_rom
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _page_inputs
                             13 	.globl _page_border
                             14 	.globl _write_char
                             15 	.globl _write_string
                             16 	.globl _clear_chars
                             17 	.globl _strlen
                             18 	.globl _asc_1
                             19 	.globl _asc_0
                             20 	.globl _vsync_last
                             21 	.globl _vsync
                             22 	.globl _hsync_last
                             23 	.globl _hsync
                             24 	.globl _chram_size
                             25 	.globl _colram
                             26 	.globl _chram
                             27 	.globl _joystick
                             28 	.globl _input0
                             29 	.globl _chram_rows
                             30 	.globl _chram_cols
                             31 ;--------------------------------------------------------
                             32 ; special function registers
                             33 ;--------------------------------------------------------
                             34 ;--------------------------------------------------------
                             35 ; ram data
                             36 ;--------------------------------------------------------
                             37 	.area _DATA
                     6000    38 _input0	=	0x6000
                     7000    39 _joystick	=	0x7000
                     8000    40 _chram	=	0x8000
                     8800    41 _colram	=	0x8800
   0000                      42 _chram_size::
   0000                      43 	.ds 2
   0002                      44 _hsync::
   0002                      45 	.ds 1
   0003                      46 _hsync_last::
   0003                      47 	.ds 1
   0004                      48 _vsync::
   0004                      49 	.ds 1
   0005                      50 _vsync_last::
   0005                      51 	.ds 1
                             52 ;--------------------------------------------------------
                             53 ; ram data
                             54 ;--------------------------------------------------------
                             55 	.area _INITIALIZED
   0000                      56 _asc_0::
   0000                      57 	.ds 1
   0001                      58 _asc_1::
   0001                      59 	.ds 1
                             60 ;--------------------------------------------------------
                             61 ; absolute external ram data
                             62 ;--------------------------------------------------------
                             63 	.area _DABS (ABS)
                             64 ;--------------------------------------------------------
                             65 ; global & static initialisations
                             66 ;--------------------------------------------------------
                             67 	.area _HOME
                             68 	.area _GSINIT
                             69 	.area _GSFINAL
                             70 	.area _GSINIT
                             71 ;--------------------------------------------------------
                             72 ; Home
                             73 ;--------------------------------------------------------
                             74 	.area _HOME
                             75 	.area _HOME
                             76 ;--------------------------------------------------------
                             77 ; code
                             78 ;--------------------------------------------------------
                             79 	.area _CODE
                             80 ;boot_rom.c:21: void clear_chars()
                             81 ;	---------------------------------
                             82 ; Function clear_chars
                             83 ; ---------------------------------
   0000                      84 _clear_chars::
                             85 ;boot_rom.c:23: for (unsigned int p = 0; p < chram_size; p++)
   0000 01 00 00      [10]   86 	ld	bc, #0x0000
   0003                      87 00103$:
   0003 21r00r00      [10]   88 	ld	hl, #_chram_size
   0006 79            [ 4]   89 	ld	a, c
   0007 96            [ 7]   90 	sub	a, (hl)
   0008 78            [ 4]   91 	ld	a, b
   0009 23            [ 6]   92 	inc	hl
   000A 9E            [ 7]   93 	sbc	a, (hl)
   000B D0            [11]   94 	ret	NC
                             95 ;boot_rom.c:25: chram[p] = 0;
   000C 21 00 80      [10]   96 	ld	hl, #_chram+0
   000F 09            [11]   97 	add	hl, bc
   0010 36 00         [10]   98 	ld	(hl), #0x00
                             99 ;boot_rom.c:23: for (unsigned int p = 0; p < chram_size; p++)
   0012 03            [ 6]  100 	inc	bc
                            101 ;boot_rom.c:27: }
   0013 18 EE         [12]  102 	jr	00103$
   0015                     103 _chram_cols:
   0015 40                  104 	.db #0x40	; 64
   0016                     105 _chram_rows:
   0016 20                  106 	.db #0x20	; 32
                            107 ;boot_rom.c:29: void write_string(const char *string, char color, unsigned int x, unsigned int y)
                            108 ;	---------------------------------
                            109 ; Function write_string
                            110 ; ---------------------------------
   0017                     111 _write_string::
   0017 DD E5         [15]  112 	push	ix
   0019 DD 21 00 00   [14]  113 	ld	ix,#0
   001D DD 39         [15]  114 	add	ix,sp
   001F F5            [11]  115 	push	af
                            116 ;boot_rom.c:31: unsigned int p = (y * chram_cols) + x;
   0020 21r15r00      [10]  117 	ld	hl,#_chram_cols + 0
   0023 4E            [ 7]  118 	ld	c, (hl)
   0024 06 00         [ 7]  119 	ld	b, #0x00
   0026 C5            [11]  120 	push	bc
   0027 DD 6E 09      [19]  121 	ld	l, 9 (ix)
   002A DD 66 0A      [19]  122 	ld	h, 10 (ix)
   002D E5            [11]  123 	push	hl
   002E CDr00r00      [17]  124 	call	__mulint
   0031 F1            [10]  125 	pop	af
   0032 F1            [10]  126 	pop	af
   0033 4D            [ 4]  127 	ld	c, l
   0034 44            [ 4]  128 	ld	b, h
   0035 DD 6E 07      [19]  129 	ld	l, 7 (ix)
   0038 DD 66 08      [19]  130 	ld	h, 8 (ix)
   003B 09            [11]  131 	add	hl, bc
   003C EB            [ 4]  132 	ex	de,hl
                            133 ;boot_rom.c:32: unsigned char l = strlen(string);
   003D DD 6E 04      [19]  134 	ld	l, 4 (ix)
   0040 DD 66 05      [19]  135 	ld	h, 5 (ix)
   0043 E5            [11]  136 	push	hl
   0044 CDr00r00      [17]  137 	call	_strlen
   0047 F1            [10]  138 	pop	af
   0048 4D            [ 4]  139 	ld	c, l
                            140 ;boot_rom.c:33: for (char c = 0; c < l; c++)
   0049 06 00         [ 7]  141 	ld	b, #0x00
   004B                     142 00103$:
   004B 78            [ 4]  143 	ld	a, b
   004C 91            [ 4]  144 	sub	a, c
   004D 30 20         [12]  145 	jr	NC,00105$
                            146 ;boot_rom.c:35: chram[p] = string[c];
   004F 21 00 80      [10]  147 	ld	hl, #_chram
   0052 19            [11]  148 	add	hl, de
   0053 E3            [19]  149 	ex	(sp), hl
   0054 DD 7E 04      [19]  150 	ld	a, 4 (ix)
   0057 80            [ 4]  151 	add	a, b
   0058 6F            [ 4]  152 	ld	l, a
   0059 DD 7E 05      [19]  153 	ld	a, 5 (ix)
   005C CE 00         [ 7]  154 	adc	a, #0x00
   005E 67            [ 4]  155 	ld	h, a
   005F 7E            [ 7]  156 	ld	a, (hl)
   0060 E1            [10]  157 	pop	hl
   0061 E5            [11]  158 	push	hl
   0062 77            [ 7]  159 	ld	(hl), a
                            160 ;boot_rom.c:36: colram[p] = color;
   0063 21 00 88      [10]  161 	ld	hl, #_colram
   0066 19            [11]  162 	add	hl, de
   0067 DD 7E 06      [19]  163 	ld	a, 6 (ix)
   006A 77            [ 7]  164 	ld	(hl), a
                            165 ;boot_rom.c:37: p++;
   006B 13            [ 6]  166 	inc	de
                            167 ;boot_rom.c:33: for (char c = 0; c < l; c++)
   006C 04            [ 4]  168 	inc	b
   006D 18 DC         [12]  169 	jr	00103$
   006F                     170 00105$:
                            171 ;boot_rom.c:39: }
   006F DD F9         [10]  172 	ld	sp, ix
   0071 DD E1         [14]  173 	pop	ix
   0073 C9            [10]  174 	ret
                            175 ;boot_rom.c:41: void write_char(unsigned char c, char color, unsigned int x, unsigned int y)
                            176 ;	---------------------------------
                            177 ; Function write_char
                            178 ; ---------------------------------
   0074                     179 _write_char::
   0074 DD E5         [15]  180 	push	ix
   0076 DD 21 00 00   [14]  181 	ld	ix,#0
   007A DD 39         [15]  182 	add	ix,sp
                            183 ;boot_rom.c:43: unsigned int p = (y * chram_cols) + x;
   007C 21r15r00      [10]  184 	ld	hl,#_chram_cols + 0
   007F 4E            [ 7]  185 	ld	c, (hl)
   0080 06 00         [ 7]  186 	ld	b, #0x00
   0082 C5            [11]  187 	push	bc
   0083 DD 6E 08      [19]  188 	ld	l, 8 (ix)
   0086 DD 66 09      [19]  189 	ld	h, 9 (ix)
   0089 E5            [11]  190 	push	hl
   008A CDr00r00      [17]  191 	call	__mulint
   008D F1            [10]  192 	pop	af
   008E F1            [10]  193 	pop	af
   008F 4D            [ 4]  194 	ld	c, l
   0090 44            [ 4]  195 	ld	b, h
   0091 DD 6E 06      [19]  196 	ld	l, 6 (ix)
   0094 DD 66 07      [19]  197 	ld	h, 7 (ix)
   0097 09            [11]  198 	add	hl, bc
   0098 4D            [ 4]  199 	ld	c, l
   0099 44            [ 4]  200 	ld	b, h
                            201 ;boot_rom.c:44: chram[p] = c;
   009A 21 00 80      [10]  202 	ld	hl, #_chram+0
   009D 09            [11]  203 	add	hl, bc
   009E DD 7E 04      [19]  204 	ld	a, 4 (ix)
   00A1 77            [ 7]  205 	ld	(hl), a
                            206 ;boot_rom.c:45: colram[p] = color;
   00A2 21 00 88      [10]  207 	ld	hl, #_colram+0
   00A5 09            [11]  208 	add	hl, bc
   00A6 DD 7E 05      [19]  209 	ld	a, 5 (ix)
   00A9 77            [ 7]  210 	ld	(hl), a
                            211 ;boot_rom.c:46: }
   00AA DD E1         [14]  212 	pop	ix
   00AC C9            [10]  213 	ret
                            214 ;boot_rom.c:48: void page_border(char color)
                            215 ;	---------------------------------
                            216 ; Function page_border
                            217 ; ---------------------------------
   00AD                     218 _page_border::
   00AD DD E5         [15]  219 	push	ix
   00AF DD 21 00 00   [14]  220 	ld	ix,#0
   00B3 DD 39         [15]  221 	add	ix,sp
                            222 ;boot_rom.c:50: write_char(128, color, 0, 0);
   00B5 21 00 00      [10]  223 	ld	hl, #0x0000
   00B8 E5            [11]  224 	push	hl
   00B9 2E 00         [ 7]  225 	ld	l, #0x00
   00BB E5            [11]  226 	push	hl
   00BC DD 56 04      [19]  227 	ld	d, 4 (ix)
   00BF 1E 80         [ 7]  228 	ld	e,#0x80
   00C1 D5            [11]  229 	push	de
   00C2 CDr74r00      [17]  230 	call	_write_char
   00C5 21 06 00      [10]  231 	ld	hl, #6
   00C8 39            [11]  232 	add	hl, sp
   00C9 F9            [ 6]  233 	ld	sp, hl
                            234 ;boot_rom.c:51: write_char(130, color, 39, 0);
   00CA 21 00 00      [10]  235 	ld	hl, #0x0000
   00CD E5            [11]  236 	push	hl
   00CE 2E 27         [ 7]  237 	ld	l, #0x27
   00D0 E5            [11]  238 	push	hl
   00D1 DD 56 04      [19]  239 	ld	d, 4 (ix)
   00D4 1E 82         [ 7]  240 	ld	e,#0x82
   00D6 D5            [11]  241 	push	de
   00D7 CDr74r00      [17]  242 	call	_write_char
   00DA 21 06 00      [10]  243 	ld	hl, #6
   00DD 39            [11]  244 	add	hl, sp
   00DE F9            [ 6]  245 	ld	sp, hl
                            246 ;boot_rom.c:52: write_char(133, color, 0, 29);
   00DF 21 1D 00      [10]  247 	ld	hl, #0x001d
   00E2 E5            [11]  248 	push	hl
   00E3 2E 00         [ 7]  249 	ld	l, #0x00
   00E5 E5            [11]  250 	push	hl
   00E6 DD 56 04      [19]  251 	ld	d, 4 (ix)
   00E9 1E 85         [ 7]  252 	ld	e,#0x85
   00EB D5            [11]  253 	push	de
   00EC CDr74r00      [17]  254 	call	_write_char
   00EF 21 06 00      [10]  255 	ld	hl, #6
   00F2 39            [11]  256 	add	hl, sp
   00F3 F9            [ 6]  257 	ld	sp, hl
                            258 ;boot_rom.c:53: write_char(132, color, 39, 29);
   00F4 21 1D 00      [10]  259 	ld	hl, #0x001d
   00F7 E5            [11]  260 	push	hl
   00F8 2E 27         [ 7]  261 	ld	l, #0x27
   00FA E5            [11]  262 	push	hl
   00FB DD 56 04      [19]  263 	ld	d, 4 (ix)
   00FE 1E 84         [ 7]  264 	ld	e,#0x84
   0100 D5            [11]  265 	push	de
   0101 CDr74r00      [17]  266 	call	_write_char
   0104 21 06 00      [10]  267 	ld	hl, #6
   0107 39            [11]  268 	add	hl, sp
   0108 F9            [ 6]  269 	ld	sp, hl
                            270 ;boot_rom.c:54: for (char x = 1; x < 39; x++)
   0109 0E 01         [ 7]  271 	ld	c, #0x01
   010B                     272 00104$:
   010B 79            [ 4]  273 	ld	a, c
   010C D6 27         [ 7]  274 	sub	a, #0x27
   010E 30 30         [12]  275 	jr	NC,00101$
                            276 ;boot_rom.c:56: write_char(129, color, x, 0);
   0110 59            [ 4]  277 	ld	e, c
   0111 16 00         [ 7]  278 	ld	d, #0x00
   0113 C5            [11]  279 	push	bc
   0114 D5            [11]  280 	push	de
   0115 21 00 00      [10]  281 	ld	hl, #0x0000
   0118 E5            [11]  282 	push	hl
   0119 D5            [11]  283 	push	de
   011A DD 56 04      [19]  284 	ld	d, 4 (ix)
   011D 1E 81         [ 7]  285 	ld	e,#0x81
   011F D5            [11]  286 	push	de
   0120 CDr74r00      [17]  287 	call	_write_char
   0123 21 06 00      [10]  288 	ld	hl, #6
   0126 39            [11]  289 	add	hl, sp
   0127 F9            [ 6]  290 	ld	sp, hl
   0128 D1            [10]  291 	pop	de
   0129 21 1D 00      [10]  292 	ld	hl, #0x001d
   012C E5            [11]  293 	push	hl
   012D D5            [11]  294 	push	de
   012E DD 56 04      [19]  295 	ld	d, 4 (ix)
   0131 1E 81         [ 7]  296 	ld	e,#0x81
   0133 D5            [11]  297 	push	de
   0134 CDr74r00      [17]  298 	call	_write_char
   0137 21 06 00      [10]  299 	ld	hl, #6
   013A 39            [11]  300 	add	hl, sp
   013B F9            [ 6]  301 	ld	sp, hl
   013C C1            [10]  302 	pop	bc
                            303 ;boot_rom.c:54: for (char x = 1; x < 39; x++)
   013D 0C            [ 4]  304 	inc	c
   013E 18 CB         [12]  305 	jr	00104$
   0140                     306 00101$:
                            307 ;boot_rom.c:59: for (char y = 1; y < 29; y++)
   0140 0E 01         [ 7]  308 	ld	c, #0x01
   0142                     309 00107$:
   0142 79            [ 4]  310 	ld	a, c
   0143 D6 1D         [ 7]  311 	sub	a, #0x1d
   0145 30 2E         [12]  312 	jr	NC,00109$
                            313 ;boot_rom.c:61: write_char(131, color, 0, y);
   0147 59            [ 4]  314 	ld	e, c
   0148 16 00         [ 7]  315 	ld	d, #0x00
   014A C5            [11]  316 	push	bc
   014B D5            [11]  317 	push	de
   014C D5            [11]  318 	push	de
   014D 21 00 00      [10]  319 	ld	hl, #0x0000
   0150 E5            [11]  320 	push	hl
   0151 DD 56 04      [19]  321 	ld	d, 4 (ix)
   0154 1E 83         [ 7]  322 	ld	e,#0x83
   0156 D5            [11]  323 	push	de
   0157 CDr74r00      [17]  324 	call	_write_char
   015A 21 06 00      [10]  325 	ld	hl, #6
   015D 39            [11]  326 	add	hl, sp
   015E F9            [ 6]  327 	ld	sp, hl
   015F 21 27 00      [10]  328 	ld	hl, #0x0027
   0162 E5            [11]  329 	push	hl
   0163 DD 56 04      [19]  330 	ld	d, 4 (ix)
   0166 1E 83         [ 7]  331 	ld	e,#0x83
   0168 D5            [11]  332 	push	de
   0169 CDr74r00      [17]  333 	call	_write_char
   016C 21 06 00      [10]  334 	ld	hl, #6
   016F 39            [11]  335 	add	hl, sp
   0170 F9            [ 6]  336 	ld	sp, hl
   0171 C1            [10]  337 	pop	bc
                            338 ;boot_rom.c:59: for (char y = 1; y < 29; y++)
   0172 0C            [ 4]  339 	inc	c
   0173 18 CD         [12]  340 	jr	00107$
   0175                     341 00109$:
                            342 ;boot_rom.c:64: }
   0175 DD E1         [14]  343 	pop	ix
   0177 C9            [10]  344 	ret
                            345 ;boot_rom.c:66: void page_inputs()
                            346 ;	---------------------------------
                            347 ; Function page_inputs
                            348 ; ---------------------------------
   0178                     349 _page_inputs::
                            350 ;boot_rom.c:68: clear_chars();
   0178 CDr00r00      [17]  351 	call	_clear_chars
                            352 ;boot_rom.c:69: page_border(0b00000111);
   017B 3E 07         [ 7]  353 	ld	a, #0x07
   017D F5            [11]  354 	push	af
   017E 33            [ 6]  355 	inc	sp
   017F CDrADr00      [17]  356 	call	_page_border
   0182 33            [ 6]  357 	inc	sp
                            358 ;boot_rom.c:70: write_string("UDLR", 0xFF, 9, 3);
   0183 21 03 00      [10]  359 	ld	hl, #0x0003
   0186 E5            [11]  360 	push	hl
   0187 2E 09         [ 7]  361 	ld	l, #0x09
   0189 E5            [11]  362 	push	hl
   018A 3E FF         [ 7]  363 	ld	a, #0xff
   018C F5            [11]  364 	push	af
   018D 33            [ 6]  365 	inc	sp
   018E 21rC9r01      [10]  366 	ld	hl, #___str_0
   0191 E5            [11]  367 	push	hl
   0192 CDr17r00      [17]  368 	call	_write_string
   0195 21 07 00      [10]  369 	ld	hl, #7
   0198 39            [11]  370 	add	hl, sp
   0199 F9            [ 6]  371 	ld	sp, hl
                            372 ;boot_rom.c:71: write_string("JOY 1)", 0xF0, 2, 4);
   019A 21 04 00      [10]  373 	ld	hl, #0x0004
   019D E5            [11]  374 	push	hl
   019E 2E 02         [ 7]  375 	ld	l, #0x02
   01A0 E5            [11]  376 	push	hl
   01A1 3E F0         [ 7]  377 	ld	a, #0xf0
   01A3 F5            [11]  378 	push	af
   01A4 33            [ 6]  379 	inc	sp
   01A5 21rCEr01      [10]  380 	ld	hl, #___str_1
   01A8 E5            [11]  381 	push	hl
   01A9 CDr17r00      [17]  382 	call	_write_string
   01AC 21 07 00      [10]  383 	ld	hl, #7
   01AF 39            [11]  384 	add	hl, sp
   01B0 F9            [ 6]  385 	ld	sp, hl
                            386 ;boot_rom.c:72: write_string("JOY 2)", 0xE0, 2, 5);
   01B1 21 05 00      [10]  387 	ld	hl, #0x0005
   01B4 E5            [11]  388 	push	hl
   01B5 2E 02         [ 7]  389 	ld	l, #0x02
   01B7 E5            [11]  390 	push	hl
   01B8 3E E0         [ 7]  391 	ld	a, #0xe0
   01BA F5            [11]  392 	push	af
   01BB 33            [ 6]  393 	inc	sp
   01BC 21rD5r01      [10]  394 	ld	hl, #___str_2
   01BF E5            [11]  395 	push	hl
   01C0 CDr17r00      [17]  396 	call	_write_string
   01C3 21 07 00      [10]  397 	ld	hl, #7
   01C6 39            [11]  398 	add	hl, sp
   01C7 F9            [ 6]  399 	ld	sp, hl
                            400 ;boot_rom.c:73: }
   01C8 C9            [10]  401 	ret
   01C9                     402 ___str_0:
   01C9 55 44 4C 52         403 	.ascii "UDLR"
   01CD 00                  404 	.db 0x00
   01CE                     405 ___str_1:
   01CE 4A 4F 59 20 31 29   406 	.ascii "JOY 1)"
   01D4 00                  407 	.db 0x00
   01D5                     408 ___str_2:
   01D5 4A 4F 59 20 32 29   409 	.ascii "JOY 2)"
   01DB 00                  410 	.db 0x00
                            411 ;boot_rom.c:78: void main()
                            412 ;	---------------------------------
                            413 ; Function main
                            414 ; ---------------------------------
   01DC                     415 _main::
   01DC DD E5         [15]  416 	push	ix
   01DE DD 21 00 00   [14]  417 	ld	ix,#0
   01E2 DD 39         [15]  418 	add	ix,sp
   01E4 21 F9 FF      [10]  419 	ld	hl, #-7
   01E7 39            [11]  420 	add	hl, sp
   01E8 F9            [ 6]  421 	ld	sp, hl
                            422 ;boot_rom.c:80: chram_size = chram_cols * chram_rows;
   01E9 21r16r00      [10]  423 	ld	hl,#_chram_rows + 0
   01EC 5E            [ 7]  424 	ld	e, (hl)
   01ED 21r15r00      [10]  425 	ld	hl,#_chram_cols + 0
   01F0 66            [ 7]  426 	ld	h, (hl)
   01F1 2E 00         [ 7]  427 	ld	l, #0x00
   01F3 55            [ 4]  428 	ld	d, l
   01F4 06 08         [ 7]  429 	ld	b, #0x08
   01F6                     430 00176$:
   01F6 29            [11]  431 	add	hl, hl
   01F7 30 01         [12]  432 	jr	NC,00177$
   01F9 19            [11]  433 	add	hl, de
   01FA                     434 00177$:
   01FA 10 FA         [13]  435 	djnz	00176$
   01FC 22r00r00      [16]  436 	ld	(_chram_size), hl
                            437 ;boot_rom.c:82: page_inputs();
   01FF CDr78r01      [17]  438 	call	_page_inputs
                            439 ;boot_rom.c:84: while (1)
   0202 06 AB         [ 7]  440 	ld	b, #0xab
   0204                     441 00108$:
                            442 ;boot_rom.c:86: hsync = input0 & 0x80;
   0204 3A 00 60      [13]  443 	ld	a,(#_input0 + 0)
   0207 E6 80         [ 7]  444 	and	a, #0x80
   0209 32r02r00      [13]  445 	ld	(#_hsync + 0),a
                            446 ;boot_rom.c:87: vsync = input0 & 0x40;
   020C 3A 00 60      [13]  447 	ld	a,(#_input0 + 0)
   020F E6 40         [ 7]  448 	and	a, #0x40
   0211 FD 21r04r00   [14]  449 	ld	iy, #_vsync
   0215 FD 77 00      [19]  450 	ld	0 (iy), a
                            451 ;boot_rom.c:92: if (vsync && !vsync_last)
   0218 FD 7E 00      [19]  452 	ld	a, 0 (iy)
   021B B7            [ 4]  453 	or	a, a
   021C CArE0r02      [10]  454 	jp	Z, 00105$
   021F 3Ar05r00      [13]  455 	ld	a,(#_vsync_last + 0)
   0222 B7            [ 4]  456 	or	a, a
   0223 C2rE0r02      [10]  457 	jp	NZ, 00105$
                            458 ;boot_rom.c:94: color++;
   0226 04            [ 4]  459 	inc	b
                            460 ;boot_rom.c:95: write_string("--- MiSTer Input Tester ---", color, 6, 1);
   0227 C5            [11]  461 	push	bc
   0228 21 01 00      [10]  462 	ld	hl, #0x0001
   022B E5            [11]  463 	push	hl
   022C 2E 06         [ 7]  464 	ld	l, #0x06
   022E E5            [11]  465 	push	hl
   022F C5            [11]  466 	push	bc
   0230 33            [ 6]  467 	inc	sp
   0231 21rEFr02      [10]  468 	ld	hl, #___str_3
   0234 E5            [11]  469 	push	hl
   0235 CDr17r00      [17]  470 	call	_write_string
   0238 21 07 00      [10]  471 	ld	hl, #7
   023B 39            [11]  472 	add	hl, sp
   023C F9            [ 6]  473 	ld	sp, hl
   023D C1            [10]  474 	pop	bc
                            475 ;boot_rom.c:97: for (char b = 0; b < 2; b++)
   023E 0E 00         [ 7]  476 	ld	c, #0x00
   0240                     477 00117$:
   0240 79            [ 4]  478 	ld	a, c
   0241 D6 02         [ 7]  479 	sub	a, #0x02
   0243 D2rE0r02      [10]  480 	jp	NC, 00105$
                            481 ;boot_rom.c:99: char m = 0b00000001;
   0246 1E 01         [ 7]  482 	ld	e, #0x01
                            483 ;boot_rom.c:100: for (char i = 0; i < 8; i++)
   0248 DD 36 FE 00   [19]  484 	ld	-2 (ix), #0x00
   024C                     485 00114$:
   024C DD 7E FE      [19]  486 	ld	a, -2 (ix)
   024F D6 08         [ 7]  487 	sub	a, #0x08
   0251 D2rDCr02      [10]  488 	jp	NC, 00118$
                            489 ;boot_rom.c:102: char x = 9 + i + (b * 10);
   0254 DD 7E FE      [19]  490 	ld	a, -2 (ix)
   0257 C6 09         [ 7]  491 	add	a, #0x09
   0259 57            [ 4]  492 	ld	d, a
   025A 79            [ 4]  493 	ld	a, c
   025B D5            [11]  494 	push	de
   025C 5F            [ 4]  495 	ld	e, a
   025D 87            [ 4]  496 	add	a, a
   025E 87            [ 4]  497 	add	a, a
   025F 83            [ 4]  498 	add	a, e
   0260 87            [ 4]  499 	add	a, a
   0261 D1            [10]  500 	pop	de
   0262 82            [ 4]  501 	add	a, d
   0263 DD 77 FD      [19]  502 	ld	-3 (ix), a
                            503 ;boot_rom.c:103: for (char j = 0; j < 3; j++)
   0266 DD 36 FF 00   [19]  504 	ld	-1 (ix), #0x00
   026A                     505 00111$:
   026A DD 7E FF      [19]  506 	ld	a, -1 (ix)
   026D D6 03         [ 7]  507 	sub	a, #0x03
   026F 30 63         [12]  508 	jr	NC,00101$
                            509 ;boot_rom.c:105: write_char((joystick[b + (j * 32)] & m) ? asc_1 : asc_0, 0xFF, x, 4 + j);
   0271 DD 7E FF      [19]  510 	ld	a, -1 (ix)
   0274 2E 00         [ 7]  511 	ld	l, #0x00
   0276 C6 04         [ 7]  512 	add	a, #0x04
   0278 DD 77 F9      [19]  513 	ld	-7 (ix), a
   027B 7D            [ 4]  514 	ld	a, l
   027C CE 00         [ 7]  515 	adc	a, #0x00
   027E DD 77 FA      [19]  516 	ld	-6 (ix), a
   0281 DD 7E FD      [19]  517 	ld	a, -3 (ix)
   0284 DD 77 FB      [19]  518 	ld	-5 (ix), a
   0287 DD 36 FC 00   [19]  519 	ld	-4 (ix), #0x00
   028B DD 7E FF      [19]  520 	ld	a, -1 (ix)
   028E 0F            [ 4]  521 	rrca
   028F 0F            [ 4]  522 	rrca
   0290 0F            [ 4]  523 	rrca
   0291 E6 E0         [ 7]  524 	and	a, #0xe0
   0293 51            [ 4]  525 	ld	d, c
   0294 82            [ 4]  526 	add	a, d
   0295 6F            [ 4]  527 	ld	l, a
   0296 17            [ 4]  528 	rla
   0297 9F            [ 4]  529 	sbc	a, a
   0298 57            [ 4]  530 	ld	d, a
   0299 3E 00         [ 7]  531 	ld	a, #<(_joystick)
   029B 85            [ 4]  532 	add	a, l
   029C 6F            [ 4]  533 	ld	l, a
   029D 3E 70         [ 7]  534 	ld	a, #>(_joystick)
   029F 8A            [ 4]  535 	adc	a, d
   02A0 67            [ 4]  536 	ld	h, a
   02A1 7E            [ 7]  537 	ld	a, (hl)
   02A2 A3            [ 4]  538 	and	a,e
   02A3 28 06         [12]  539 	jr	Z,00121$
   02A5 21r01r00      [10]  540 	ld	hl,#_asc_1 + 0
   02A8 56            [ 7]  541 	ld	d, (hl)
   02A9 18 04         [12]  542 	jr	00122$
   02AB                     543 00121$:
   02AB 21r00r00      [10]  544 	ld	hl,#_asc_0 + 0
   02AE 56            [ 7]  545 	ld	d, (hl)
   02AF                     546 00122$:
   02AF C5            [11]  547 	push	bc
   02B0 D5            [11]  548 	push	de
   02B1 DD 6E F9      [19]  549 	ld	l, -7 (ix)
   02B4 DD 66 FA      [19]  550 	ld	h, -6 (ix)
   02B7 E5            [11]  551 	push	hl
   02B8 DD 6E FB      [19]  552 	ld	l, -5 (ix)
   02BB DD 66 FC      [19]  553 	ld	h, -4 (ix)
   02BE E5            [11]  554 	push	hl
   02BF 3E FF         [ 7]  555 	ld	a, #0xff
   02C1 F5            [11]  556 	push	af
   02C2 33            [ 6]  557 	inc	sp
   02C3 D5            [11]  558 	push	de
   02C4 33            [ 6]  559 	inc	sp
   02C5 CDr74r00      [17]  560 	call	_write_char
   02C8 21 06 00      [10]  561 	ld	hl, #6
   02CB 39            [11]  562 	add	hl, sp
   02CC F9            [ 6]  563 	ld	sp, hl
   02CD D1            [10]  564 	pop	de
   02CE C1            [10]  565 	pop	bc
                            566 ;boot_rom.c:103: for (char j = 0; j < 3; j++)
   02CF DD 34 FF      [23]  567 	inc	-1 (ix)
   02D2 18 96         [12]  568 	jr	00111$
   02D4                     569 00101$:
                            570 ;boot_rom.c:107: m <<= 1;
   02D4 CB 23         [ 8]  571 	sla	e
                            572 ;boot_rom.c:100: for (char i = 0; i < 8; i++)
   02D6 DD 34 FE      [23]  573 	inc	-2 (ix)
   02D9 C3r4Cr02      [10]  574 	jp	00114$
   02DC                     575 00118$:
                            576 ;boot_rom.c:97: for (char b = 0; b < 2; b++)
   02DC 0C            [ 4]  577 	inc	c
   02DD C3r40r02      [10]  578 	jp	00117$
   02E0                     579 00105$:
                            580 ;boot_rom.c:111: hsync_last = hsync;
   02E0 3Ar02r00      [13]  581 	ld	a,(#_hsync + 0)
   02E3 32r03r00      [13]  582 	ld	(#_hsync_last + 0),a
                            583 ;boot_rom.c:112: vsync_last = vsync;
   02E6 3Ar04r00      [13]  584 	ld	a,(#_vsync + 0)
   02E9 32r05r00      [13]  585 	ld	(#_vsync_last + 0),a
                            586 ;boot_rom.c:114: }
   02EC C3r04r02      [10]  587 	jp	00108$
   02EF                     588 ___str_3:
   02EF 2D 2D 2D 20 4D 69   589 	.ascii "--- MiSTer Input Tester ---"
        53 54 65 72 20 49
        6E 70 75 74 20 54
        65 73 74 65 72 20
        2D 2D 2D
   030A 00                  590 	.db 0x00
                            591 	.area _CODE
                            592 	.area _INITIALIZER
   0000                     593 __xinit__asc_0:
   0000 30                  594 	.db #0x30	; 48	'0'
   0001                     595 __xinit__asc_1:
   0001 31                  596 	.db #0x31	; 49	'1'
                            597 	.area _CABS (ABS)
