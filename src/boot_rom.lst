                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.8.0 #10562 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module boot_rom
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _page_inputs
                             13 	.globl _page_border
                             14 	.globl _write_char
                             15 	.globl _write_string
                             16 	.globl _clear_chars
                             17 	.globl _strlen
                             18 	.globl _sprintf
                             19 	.globl _asc_1
                             20 	.globl _asc_0
                             21 	.globl _vsync_last
                             22 	.globl _vsync
                             23 	.globl _hsync_last
                             24 	.globl _hsync
                             25 	.globl _chram_size
                             26 	.globl _colram
                             27 	.globl _chram
                             28 	.globl _analog
                             29 	.globl _joystick
                             30 	.globl _input0
                             31 	.globl _chram_rows
                             32 	.globl _chram_cols
                             33 ;--------------------------------------------------------
                             34 ; special function registers
                             35 ;--------------------------------------------------------
                             36 ;--------------------------------------------------------
                             37 ; ram data
                             38 ;--------------------------------------------------------
                             39 	.area _DATA
                     6000    40 _input0	=	0x6000
                     7000    41 _joystick	=	0x7000
                     7100    42 _analog	=	0x7100
                     8000    43 _chram	=	0x8000
                     8800    44 _colram	=	0x8800
   0000                      45 _chram_size::
   0000                      46 	.ds 2
   0002                      47 _hsync::
   0002                      48 	.ds 1
   0003                      49 _hsync_last::
   0003                      50 	.ds 1
   0004                      51 _vsync::
   0004                      52 	.ds 1
   0005                      53 _vsync_last::
   0005                      54 	.ds 1
                             55 ;--------------------------------------------------------
                             56 ; ram data
                             57 ;--------------------------------------------------------
                             58 	.area _INITIALIZED
   0000                      59 _asc_0::
   0000                      60 	.ds 1
   0001                      61 _asc_1::
   0001                      62 	.ds 1
                             63 ;--------------------------------------------------------
                             64 ; absolute external ram data
                             65 ;--------------------------------------------------------
                             66 	.area _DABS (ABS)
                             67 ;--------------------------------------------------------
                             68 ; global & static initialisations
                             69 ;--------------------------------------------------------
                             70 	.area _HOME
                             71 	.area _GSINIT
                             72 	.area _GSFINAL
                             73 	.area _GSINIT
                             74 ;--------------------------------------------------------
                             75 ; Home
                             76 ;--------------------------------------------------------
                             77 	.area _HOME
                             78 	.area _HOME
                             79 ;--------------------------------------------------------
                             80 ; code
                             81 ;--------------------------------------------------------
                             82 	.area _CODE
                             83 ;boot_rom.c:22: void clear_chars()
                             84 ;	---------------------------------
                             85 ; Function clear_chars
                             86 ; ---------------------------------
   0000                      87 _clear_chars::
                             88 ;boot_rom.c:24: for (unsigned int p = 0; p < chram_size; p++)
   0000 01 00 00      [10]   89 	ld	bc, #0x0000
   0003                      90 00103$:
   0003 21r00r00      [10]   91 	ld	hl, #_chram_size
   0006 79            [ 4]   92 	ld	a, c
   0007 96            [ 7]   93 	sub	a, (hl)
   0008 78            [ 4]   94 	ld	a, b
   0009 23            [ 6]   95 	inc	hl
   000A 9E            [ 7]   96 	sbc	a, (hl)
   000B D0            [11]   97 	ret	NC
                             98 ;boot_rom.c:26: chram[p] = 0;
   000C 21 00 80      [10]   99 	ld	hl, #_chram+0
   000F 09            [11]  100 	add	hl, bc
   0010 36 00         [10]  101 	ld	(hl), #0x00
                            102 ;boot_rom.c:24: for (unsigned int p = 0; p < chram_size; p++)
   0012 03            [ 6]  103 	inc	bc
                            104 ;boot_rom.c:28: }
   0013 18 EE         [12]  105 	jr	00103$
   0015                     106 _chram_cols:
   0015 40                  107 	.db #0x40	; 64
   0016                     108 _chram_rows:
   0016 20                  109 	.db #0x20	; 32
                            110 ;boot_rom.c:30: void write_string(const char *string, char color, unsigned int x, unsigned int y)
                            111 ;	---------------------------------
                            112 ; Function write_string
                            113 ; ---------------------------------
   0017                     114 _write_string::
   0017 DD E5         [15]  115 	push	ix
   0019 DD 21 00 00   [14]  116 	ld	ix,#0
   001D DD 39         [15]  117 	add	ix,sp
   001F F5            [11]  118 	push	af
                            119 ;boot_rom.c:32: unsigned int p = (y * chram_cols) + x;
   0020 21r15r00      [10]  120 	ld	hl,#_chram_cols + 0
   0023 4E            [ 7]  121 	ld	c, (hl)
   0024 06 00         [ 7]  122 	ld	b, #0x00
   0026 C5            [11]  123 	push	bc
   0027 DD 6E 09      [19]  124 	ld	l, 9 (ix)
   002A DD 66 0A      [19]  125 	ld	h, 10 (ix)
   002D E5            [11]  126 	push	hl
   002E CDr00r00      [17]  127 	call	__mulint
   0031 F1            [10]  128 	pop	af
   0032 F1            [10]  129 	pop	af
   0033 4D            [ 4]  130 	ld	c, l
   0034 44            [ 4]  131 	ld	b, h
   0035 DD 6E 07      [19]  132 	ld	l, 7 (ix)
   0038 DD 66 08      [19]  133 	ld	h, 8 (ix)
   003B 09            [11]  134 	add	hl, bc
   003C EB            [ 4]  135 	ex	de,hl
                            136 ;boot_rom.c:33: unsigned char l = strlen(string);
   003D DD 6E 04      [19]  137 	ld	l, 4 (ix)
   0040 DD 66 05      [19]  138 	ld	h, 5 (ix)
   0043 E5            [11]  139 	push	hl
   0044 CDr00r00      [17]  140 	call	_strlen
   0047 F1            [10]  141 	pop	af
   0048 4D            [ 4]  142 	ld	c, l
                            143 ;boot_rom.c:34: for (char c = 0; c < l; c++)
   0049 06 00         [ 7]  144 	ld	b, #0x00
   004B                     145 00103$:
   004B 78            [ 4]  146 	ld	a, b
   004C 91            [ 4]  147 	sub	a, c
   004D 30 20         [12]  148 	jr	NC,00105$
                            149 ;boot_rom.c:36: chram[p] = string[c];
   004F 21 00 80      [10]  150 	ld	hl, #_chram
   0052 19            [11]  151 	add	hl, de
   0053 E3            [19]  152 	ex	(sp), hl
   0054 DD 7E 04      [19]  153 	ld	a, 4 (ix)
   0057 80            [ 4]  154 	add	a, b
   0058 6F            [ 4]  155 	ld	l, a
   0059 DD 7E 05      [19]  156 	ld	a, 5 (ix)
   005C CE 00         [ 7]  157 	adc	a, #0x00
   005E 67            [ 4]  158 	ld	h, a
   005F 7E            [ 7]  159 	ld	a, (hl)
   0060 E1            [10]  160 	pop	hl
   0061 E5            [11]  161 	push	hl
   0062 77            [ 7]  162 	ld	(hl), a
                            163 ;boot_rom.c:37: colram[p] = color;
   0063 21 00 88      [10]  164 	ld	hl, #_colram
   0066 19            [11]  165 	add	hl, de
   0067 DD 7E 06      [19]  166 	ld	a, 6 (ix)
   006A 77            [ 7]  167 	ld	(hl), a
                            168 ;boot_rom.c:38: p++;
   006B 13            [ 6]  169 	inc	de
                            170 ;boot_rom.c:34: for (char c = 0; c < l; c++)
   006C 04            [ 4]  171 	inc	b
   006D 18 DC         [12]  172 	jr	00103$
   006F                     173 00105$:
                            174 ;boot_rom.c:40: }
   006F DD F9         [10]  175 	ld	sp, ix
   0071 DD E1         [14]  176 	pop	ix
   0073 C9            [10]  177 	ret
                            178 ;boot_rom.c:42: void write_char(unsigned char c, char color, unsigned int x, unsigned int y)
                            179 ;	---------------------------------
                            180 ; Function write_char
                            181 ; ---------------------------------
   0074                     182 _write_char::
   0074 DD E5         [15]  183 	push	ix
   0076 DD 21 00 00   [14]  184 	ld	ix,#0
   007A DD 39         [15]  185 	add	ix,sp
                            186 ;boot_rom.c:44: unsigned int p = (y * chram_cols) + x;
   007C 21r15r00      [10]  187 	ld	hl,#_chram_cols + 0
   007F 4E            [ 7]  188 	ld	c, (hl)
   0080 06 00         [ 7]  189 	ld	b, #0x00
   0082 C5            [11]  190 	push	bc
   0083 DD 6E 08      [19]  191 	ld	l, 8 (ix)
   0086 DD 66 09      [19]  192 	ld	h, 9 (ix)
   0089 E5            [11]  193 	push	hl
   008A CDr00r00      [17]  194 	call	__mulint
   008D F1            [10]  195 	pop	af
   008E F1            [10]  196 	pop	af
   008F 4D            [ 4]  197 	ld	c, l
   0090 44            [ 4]  198 	ld	b, h
   0091 DD 6E 06      [19]  199 	ld	l, 6 (ix)
   0094 DD 66 07      [19]  200 	ld	h, 7 (ix)
   0097 09            [11]  201 	add	hl, bc
   0098 4D            [ 4]  202 	ld	c, l
   0099 44            [ 4]  203 	ld	b, h
                            204 ;boot_rom.c:45: chram[p] = c;
   009A 21 00 80      [10]  205 	ld	hl, #_chram+0
   009D 09            [11]  206 	add	hl, bc
   009E DD 7E 04      [19]  207 	ld	a, 4 (ix)
   00A1 77            [ 7]  208 	ld	(hl), a
                            209 ;boot_rom.c:46: colram[p] = color;
   00A2 21 00 88      [10]  210 	ld	hl, #_colram+0
   00A5 09            [11]  211 	add	hl, bc
   00A6 DD 7E 05      [19]  212 	ld	a, 5 (ix)
   00A9 77            [ 7]  213 	ld	(hl), a
                            214 ;boot_rom.c:47: }
   00AA DD E1         [14]  215 	pop	ix
   00AC C9            [10]  216 	ret
                            217 ;boot_rom.c:49: void page_border(char color)
                            218 ;	---------------------------------
                            219 ; Function page_border
                            220 ; ---------------------------------
   00AD                     221 _page_border::
   00AD DD E5         [15]  222 	push	ix
   00AF DD 21 00 00   [14]  223 	ld	ix,#0
   00B3 DD 39         [15]  224 	add	ix,sp
                            225 ;boot_rom.c:51: write_char(128, color, 0, 0);
   00B5 21 00 00      [10]  226 	ld	hl, #0x0000
   00B8 E5            [11]  227 	push	hl
   00B9 2E 00         [ 7]  228 	ld	l, #0x00
   00BB E5            [11]  229 	push	hl
   00BC DD 56 04      [19]  230 	ld	d, 4 (ix)
   00BF 1E 80         [ 7]  231 	ld	e,#0x80
   00C1 D5            [11]  232 	push	de
   00C2 CDr74r00      [17]  233 	call	_write_char
   00C5 21 06 00      [10]  234 	ld	hl, #6
   00C8 39            [11]  235 	add	hl, sp
   00C9 F9            [ 6]  236 	ld	sp, hl
                            237 ;boot_rom.c:52: write_char(130, color, 39, 0);
   00CA 21 00 00      [10]  238 	ld	hl, #0x0000
   00CD E5            [11]  239 	push	hl
   00CE 2E 27         [ 7]  240 	ld	l, #0x27
   00D0 E5            [11]  241 	push	hl
   00D1 DD 56 04      [19]  242 	ld	d, 4 (ix)
   00D4 1E 82         [ 7]  243 	ld	e,#0x82
   00D6 D5            [11]  244 	push	de
   00D7 CDr74r00      [17]  245 	call	_write_char
   00DA 21 06 00      [10]  246 	ld	hl, #6
   00DD 39            [11]  247 	add	hl, sp
   00DE F9            [ 6]  248 	ld	sp, hl
                            249 ;boot_rom.c:53: write_char(133, color, 0, 29);
   00DF 21 1D 00      [10]  250 	ld	hl, #0x001d
   00E2 E5            [11]  251 	push	hl
   00E3 2E 00         [ 7]  252 	ld	l, #0x00
   00E5 E5            [11]  253 	push	hl
   00E6 DD 56 04      [19]  254 	ld	d, 4 (ix)
   00E9 1E 85         [ 7]  255 	ld	e,#0x85
   00EB D5            [11]  256 	push	de
   00EC CDr74r00      [17]  257 	call	_write_char
   00EF 21 06 00      [10]  258 	ld	hl, #6
   00F2 39            [11]  259 	add	hl, sp
   00F3 F9            [ 6]  260 	ld	sp, hl
                            261 ;boot_rom.c:54: write_char(132, color, 39, 29);
   00F4 21 1D 00      [10]  262 	ld	hl, #0x001d
   00F7 E5            [11]  263 	push	hl
   00F8 2E 27         [ 7]  264 	ld	l, #0x27
   00FA E5            [11]  265 	push	hl
   00FB DD 56 04      [19]  266 	ld	d, 4 (ix)
   00FE 1E 84         [ 7]  267 	ld	e,#0x84
   0100 D5            [11]  268 	push	de
   0101 CDr74r00      [17]  269 	call	_write_char
   0104 21 06 00      [10]  270 	ld	hl, #6
   0107 39            [11]  271 	add	hl, sp
   0108 F9            [ 6]  272 	ld	sp, hl
                            273 ;boot_rom.c:55: for (char x = 1; x < 39; x++)
   0109 0E 01         [ 7]  274 	ld	c, #0x01
   010B                     275 00104$:
   010B 79            [ 4]  276 	ld	a, c
   010C D6 27         [ 7]  277 	sub	a, #0x27
   010E 30 30         [12]  278 	jr	NC,00101$
                            279 ;boot_rom.c:57: write_char(129, color, x, 0);
   0110 59            [ 4]  280 	ld	e, c
   0111 16 00         [ 7]  281 	ld	d, #0x00
   0113 C5            [11]  282 	push	bc
   0114 D5            [11]  283 	push	de
   0115 21 00 00      [10]  284 	ld	hl, #0x0000
   0118 E5            [11]  285 	push	hl
   0119 D5            [11]  286 	push	de
   011A DD 56 04      [19]  287 	ld	d, 4 (ix)
   011D 1E 81         [ 7]  288 	ld	e,#0x81
   011F D5            [11]  289 	push	de
   0120 CDr74r00      [17]  290 	call	_write_char
   0123 21 06 00      [10]  291 	ld	hl, #6
   0126 39            [11]  292 	add	hl, sp
   0127 F9            [ 6]  293 	ld	sp, hl
   0128 D1            [10]  294 	pop	de
   0129 21 1D 00      [10]  295 	ld	hl, #0x001d
   012C E5            [11]  296 	push	hl
   012D D5            [11]  297 	push	de
   012E DD 56 04      [19]  298 	ld	d, 4 (ix)
   0131 1E 81         [ 7]  299 	ld	e,#0x81
   0133 D5            [11]  300 	push	de
   0134 CDr74r00      [17]  301 	call	_write_char
   0137 21 06 00      [10]  302 	ld	hl, #6
   013A 39            [11]  303 	add	hl, sp
   013B F9            [ 6]  304 	ld	sp, hl
   013C C1            [10]  305 	pop	bc
                            306 ;boot_rom.c:55: for (char x = 1; x < 39; x++)
   013D 0C            [ 4]  307 	inc	c
   013E 18 CB         [12]  308 	jr	00104$
   0140                     309 00101$:
                            310 ;boot_rom.c:60: for (char y = 1; y < 29; y++)
   0140 0E 01         [ 7]  311 	ld	c, #0x01
   0142                     312 00107$:
   0142 79            [ 4]  313 	ld	a, c
   0143 D6 1D         [ 7]  314 	sub	a, #0x1d
   0145 30 2E         [12]  315 	jr	NC,00109$
                            316 ;boot_rom.c:62: write_char(131, color, 0, y);
   0147 59            [ 4]  317 	ld	e, c
   0148 16 00         [ 7]  318 	ld	d, #0x00
   014A C5            [11]  319 	push	bc
   014B D5            [11]  320 	push	de
   014C D5            [11]  321 	push	de
   014D 21 00 00      [10]  322 	ld	hl, #0x0000
   0150 E5            [11]  323 	push	hl
   0151 DD 56 04      [19]  324 	ld	d, 4 (ix)
   0154 1E 83         [ 7]  325 	ld	e,#0x83
   0156 D5            [11]  326 	push	de
   0157 CDr74r00      [17]  327 	call	_write_char
   015A 21 06 00      [10]  328 	ld	hl, #6
   015D 39            [11]  329 	add	hl, sp
   015E F9            [ 6]  330 	ld	sp, hl
   015F 21 27 00      [10]  331 	ld	hl, #0x0027
   0162 E5            [11]  332 	push	hl
   0163 DD 56 04      [19]  333 	ld	d, 4 (ix)
   0166 1E 83         [ 7]  334 	ld	e,#0x83
   0168 D5            [11]  335 	push	de
   0169 CDr74r00      [17]  336 	call	_write_char
   016C 21 06 00      [10]  337 	ld	hl, #6
   016F 39            [11]  338 	add	hl, sp
   0170 F9            [ 6]  339 	ld	sp, hl
   0171 C1            [10]  340 	pop	bc
                            341 ;boot_rom.c:60: for (char y = 1; y < 29; y++)
   0172 0C            [ 4]  342 	inc	c
   0173 18 CD         [12]  343 	jr	00107$
   0175                     344 00109$:
                            345 ;boot_rom.c:65: }
   0175 DD E1         [14]  346 	pop	ix
   0177 C9            [10]  347 	ret
                            348 ;boot_rom.c:67: void page_inputs()
                            349 ;	---------------------------------
                            350 ; Function page_inputs
                            351 ; ---------------------------------
   0178                     352 _page_inputs::
                            353 ;boot_rom.c:69: clear_chars();
   0178 CDr00r00      [17]  354 	call	_clear_chars
                            355 ;boot_rom.c:70: page_border(0b00000111);
   017B 3E 07         [ 7]  356 	ld	a, #0x07
   017D F5            [11]  357 	push	af
   017E 33            [ 6]  358 	inc	sp
   017F CDrADr00      [17]  359 	call	_page_border
   0182 33            [ 6]  360 	inc	sp
                            361 ;boot_rom.c:71: write_string("UDLR", 0xFF, 9, 3);
   0183 21 03 00      [10]  362 	ld	hl, #0x0003
   0186 E5            [11]  363 	push	hl
   0187 2E 09         [ 7]  364 	ld	l, #0x09
   0189 E5            [11]  365 	push	hl
   018A 3E FF         [ 7]  366 	ld	a, #0xff
   018C F5            [11]  367 	push	af
   018D 33            [ 6]  368 	inc	sp
   018E 21rE0r01      [10]  369 	ld	hl, #___str_0
   0191 E5            [11]  370 	push	hl
   0192 CDr17r00      [17]  371 	call	_write_string
   0195 21 07 00      [10]  372 	ld	hl, #7
   0198 39            [11]  373 	add	hl, sp
   0199 F9            [ 6]  374 	ld	sp, hl
                            375 ;boot_rom.c:72: write_string("JOY 1)", 0xF0, 2, 4);
   019A 21 04 00      [10]  376 	ld	hl, #0x0004
   019D E5            [11]  377 	push	hl
   019E 2E 02         [ 7]  378 	ld	l, #0x02
   01A0 E5            [11]  379 	push	hl
   01A1 3E F0         [ 7]  380 	ld	a, #0xf0
   01A3 F5            [11]  381 	push	af
   01A4 33            [ 6]  382 	inc	sp
   01A5 21rE5r01      [10]  383 	ld	hl, #___str_1
   01A8 E5            [11]  384 	push	hl
   01A9 CDr17r00      [17]  385 	call	_write_string
   01AC 21 07 00      [10]  386 	ld	hl, #7
   01AF 39            [11]  387 	add	hl, sp
   01B0 F9            [ 6]  388 	ld	sp, hl
                            389 ;boot_rom.c:73: write_string("JOY 2)", 0xE0, 2, 5);
   01B1 21 05 00      [10]  390 	ld	hl, #0x0005
   01B4 E5            [11]  391 	push	hl
   01B5 2E 02         [ 7]  392 	ld	l, #0x02
   01B7 E5            [11]  393 	push	hl
   01B8 3E E0         [ 7]  394 	ld	a, #0xe0
   01BA F5            [11]  395 	push	af
   01BB 33            [ 6]  396 	inc	sp
   01BC 21rECr01      [10]  397 	ld	hl, #___str_2
   01BF E5            [11]  398 	push	hl
   01C0 CDr17r00      [17]  399 	call	_write_string
   01C3 21 07 00      [10]  400 	ld	hl, #7
   01C6 39            [11]  401 	add	hl, sp
   01C7 F9            [ 6]  402 	ld	sp, hl
                            403 ;boot_rom.c:74: write_string("JOY 3)", 0xD0, 2, 6);
   01C8 21 06 00      [10]  404 	ld	hl, #0x0006
   01CB E5            [11]  405 	push	hl
   01CC 2E 02         [ 7]  406 	ld	l, #0x02
   01CE E5            [11]  407 	push	hl
   01CF 3E D0         [ 7]  408 	ld	a, #0xd0
   01D1 F5            [11]  409 	push	af
   01D2 33            [ 6]  410 	inc	sp
   01D3 21rF3r01      [10]  411 	ld	hl, #___str_3
   01D6 E5            [11]  412 	push	hl
   01D7 CDr17r00      [17]  413 	call	_write_string
   01DA 21 07 00      [10]  414 	ld	hl, #7
   01DD 39            [11]  415 	add	hl, sp
   01DE F9            [ 6]  416 	ld	sp, hl
                            417 ;boot_rom.c:75: }
   01DF C9            [10]  418 	ret
   01E0                     419 ___str_0:
   01E0 55 44 4C 52         420 	.ascii "UDLR"
   01E4 00                  421 	.db 0x00
   01E5                     422 ___str_1:
   01E5 4A 4F 59 20 31 29   423 	.ascii "JOY 1)"
   01EB 00                  424 	.db 0x00
   01EC                     425 ___str_2:
   01EC 4A 4F 59 20 32 29   426 	.ascii "JOY 2)"
   01F2 00                  427 	.db 0x00
   01F3                     428 ___str_3:
   01F3 4A 4F 59 20 33 29   429 	.ascii "JOY 3)"
   01F9 00                  430 	.db 0x00
                            431 ;boot_rom.c:80: void main()
                            432 ;	---------------------------------
                            433 ; Function main
                            434 ; ---------------------------------
   01FA                     435 _main::
   01FA DD E5         [15]  436 	push	ix
   01FC DD 21 00 00   [14]  437 	ld	ix,#0
   0200 DD 39         [15]  438 	add	ix,sp
   0202 21 E8 FF      [10]  439 	ld	hl, #-24
   0205 39            [11]  440 	add	hl, sp
   0206 F9            [ 6]  441 	ld	sp, hl
                            442 ;boot_rom.c:82: chram_size = chram_cols * chram_rows;
   0207 21r16r00      [10]  443 	ld	hl,#_chram_rows + 0
   020A 5E            [ 7]  444 	ld	e, (hl)
   020B 21r15r00      [10]  445 	ld	hl,#_chram_cols + 0
   020E 66            [ 7]  446 	ld	h, (hl)
   020F 2E 00         [ 7]  447 	ld	l, #0x00
   0211 55            [ 4]  448 	ld	d, l
   0212 06 08         [ 7]  449 	ld	b, #0x08
   0214                     450 00191$:
   0214 29            [11]  451 	add	hl, hl
   0215 30 01         [12]  452 	jr	NC,00192$
   0217 19            [11]  453 	add	hl, de
   0218                     454 00192$:
   0218 10 FA         [13]  455 	djnz	00191$
   021A 22r00r00      [16]  456 	ld	(_chram_size), hl
                            457 ;boot_rom.c:84: page_inputs();
   021D CDr78r01      [17]  458 	call	_page_inputs
                            459 ;boot_rom.c:86: while (1)
   0220 DD 36 F1 AB   [19]  460 	ld	-15 (ix), #0xab
   0224                     461 00109$:
                            462 ;boot_rom.c:88: hsync = input0 & 0x80;
   0224 3A 00 60      [13]  463 	ld	a,(#_input0 + 0)
   0227 E6 80         [ 7]  464 	and	a, #0x80
   0229 32r02r00      [13]  465 	ld	(#_hsync + 0),a
                            466 ;boot_rom.c:89: vsync = input0 & 0x40;
   022C 3A 00 60      [13]  467 	ld	a,(#_input0 + 0)
   022F E6 40         [ 7]  468 	and	a, #0x40
   0231 FD 21r04r00   [14]  469 	ld	iy, #_vsync
   0235 FD 77 00      [19]  470 	ld	0 (iy), a
                            471 ;boot_rom.c:94: if (vsync && !vsync_last)
   0238 FD 7E 00      [19]  472 	ld	a, 0 (iy)
   023B B7            [ 4]  473 	or	a, a
   023C CArB5r03      [10]  474 	jp	Z, 00106$
   023F 3Ar05r00      [13]  475 	ld	a,(#_vsync_last + 0)
   0242 B7            [ 4]  476 	or	a, a
   0243 C2rB5r03      [10]  477 	jp	NZ, 00106$
                            478 ;boot_rom.c:96: color++;
   0246 DD 34 F1      [23]  479 	inc	-15 (ix)
                            480 ;boot_rom.c:97: write_string("--- MiSTer Input Tester ---", color, 6, 1);
   0249 21 01 00      [10]  481 	ld	hl, #0x0001
   024C E5            [11]  482 	push	hl
   024D 2E 06         [ 7]  483 	ld	l, #0x06
   024F E5            [11]  484 	push	hl
   0250 DD 7E F1      [19]  485 	ld	a, -15 (ix)
   0253 F5            [11]  486 	push	af
   0254 33            [ 6]  487 	inc	sp
   0255 21rC4r03      [10]  488 	ld	hl, #___str_4
   0258 E5            [11]  489 	push	hl
   0259 CDr17r00      [17]  490 	call	_write_string
   025C 21 07 00      [10]  491 	ld	hl, #7
   025F 39            [11]  492 	add	hl, sp
   0260 F9            [ 6]  493 	ld	sp, hl
                            494 ;boot_rom.c:98: int y = 4;
   0261 01 04 00      [10]  495 	ld	bc, #0x0004
                            496 ;boot_rom.c:99: for (char b = 0; b < 2; b++)
   0264 1E 00         [ 7]  497 	ld	e, #0x00
   0266                     498 00118$:
   0266 7B            [ 4]  499 	ld	a, e
   0267 D6 02         [ 7]  500 	sub	a, #0x02
   0269 D2r1Dr03      [10]  501 	jp	NC, 00103$
                            502 ;boot_rom.c:101: char m = 0b00000001;
   026C DD 36 FB 01   [19]  503 	ld	-5 (ix), #0x01
                            504 ;boot_rom.c:102: for (char i = 0; i < 8; i++)
   0270 DD 36 FA 00   [19]  505 	ld	-6 (ix), #0x00
   0274                     506 00115$:
   0274 DD 7E FA      [19]  507 	ld	a, -6 (ix)
   0277 D6 08         [ 7]  508 	sub	a, #0x08
   0279 D2r19r03      [10]  509 	jp	NC, 00119$
                            510 ;boot_rom.c:104: char x = 9 + i + (b * 10);
   027C DD 7E FA      [19]  511 	ld	a, -6 (ix)
   027F C6 09         [ 7]  512 	add	a, #0x09
   0281 DD 77 F8      [19]  513 	ld	-8 (ix), a
   0284 53            [ 4]  514 	ld	d, e
   0285 D5            [11]  515 	push	de
   0286 7A            [ 4]  516 	ld	a, d
   0287 5F            [ 4]  517 	ld	e, a
   0288 87            [ 4]  518 	add	a, a
   0289 87            [ 4]  519 	add	a, a
   028A 83            [ 4]  520 	add	a, e
   028B 87            [ 4]  521 	add	a, a
   028C D1            [10]  522 	pop	de
   028D DD 86 F8      [19]  523 	add	a, -8 (ix)
   0290 DD 77 F9      [19]  524 	ld	-7 (ix), a
                            525 ;boot_rom.c:105: for (char j = 0; j < 3; j++)
   0293 7A            [ 4]  526 	ld	a, d
   0294 87            [ 4]  527 	add	a, a
   0295 87            [ 4]  528 	add	a, a
   0296 87            [ 4]  529 	add	a, a
   0297 DD 77 F8      [19]  530 	ld	-8 (ix), a
   029A DD 36 FE 00   [19]  531 	ld	-2 (ix), #0x00
   029E                     532 00112$:
   029E DD 7E FE      [19]  533 	ld	a, -2 (ix)
   02A1 D6 03         [ 7]  534 	sub	a, #0x03
   02A3 30 67         [12]  535 	jr	NC,00101$
                            536 ;boot_rom.c:107: write_char((joystick[(b * 8) + (j * 32)] & m) ? asc_1 : asc_0, 0xFF, x, 4 + j);
   02A5 DD 7E FE      [19]  537 	ld	a, -2 (ix)
   02A8 2E 00         [ 7]  538 	ld	l, #0x00
   02AA C6 04         [ 7]  539 	add	a, #0x04
   02AC DD 77 F2      [19]  540 	ld	-14 (ix), a
   02AF 7D            [ 4]  541 	ld	a, l
   02B0 CE 00         [ 7]  542 	adc	a, #0x00
   02B2 DD 77 F3      [19]  543 	ld	-13 (ix), a
   02B5 DD 7E F9      [19]  544 	ld	a, -7 (ix)
   02B8 DD 77 F6      [19]  545 	ld	-10 (ix), a
   02BB DD 36 F7 00   [19]  546 	ld	-9 (ix), #0x00
   02BF DD 7E FE      [19]  547 	ld	a, -2 (ix)
   02C2 0F            [ 4]  548 	rrca
   02C3 0F            [ 4]  549 	rrca
   02C4 0F            [ 4]  550 	rrca
   02C5 E6 E0         [ 7]  551 	and	a, #0xe0
   02C7 DD 86 F8      [19]  552 	add	a, -8 (ix)
   02CA 57            [ 4]  553 	ld	d, a
   02CB 17            [ 4]  554 	rla
   02CC 9F            [ 4]  555 	sbc	a, a
   02CD 67            [ 4]  556 	ld	h, a
   02CE 3E 00         [ 7]  557 	ld	a, #<(_joystick)
   02D0 82            [ 4]  558 	add	a, d
   02D1 6F            [ 4]  559 	ld	l, a
   02D2 3E 70         [ 7]  560 	ld	a, #>(_joystick)
   02D4 8C            [ 4]  561 	adc	a, h
   02D5 67            [ 4]  562 	ld	h, a
   02D6 7E            [ 7]  563 	ld	a, (hl)
   02D7 DD A6 FB      [19]  564 	and	a, -5 (ix)
   02DA B7            [ 4]  565 	or	a, a
   02DB 28 06         [12]  566 	jr	Z,00125$
   02DD 21r01r00      [10]  567 	ld	hl,#_asc_1 + 0
   02E0 56            [ 7]  568 	ld	d, (hl)
   02E1 18 04         [12]  569 	jr	00126$
   02E3                     570 00125$:
   02E3 21r00r00      [10]  571 	ld	hl,#_asc_0 + 0
   02E6 56            [ 7]  572 	ld	d, (hl)
   02E7                     573 00126$:
   02E7 C5            [11]  574 	push	bc
   02E8 D5            [11]  575 	push	de
   02E9 DD 6E F2      [19]  576 	ld	l, -14 (ix)
   02EC DD 66 F3      [19]  577 	ld	h, -13 (ix)
   02EF E5            [11]  578 	push	hl
   02F0 DD 6E F6      [19]  579 	ld	l, -10 (ix)
   02F3 DD 66 F7      [19]  580 	ld	h, -9 (ix)
   02F6 E5            [11]  581 	push	hl
   02F7 3E FF         [ 7]  582 	ld	a, #0xff
   02F9 F5            [11]  583 	push	af
   02FA 33            [ 6]  584 	inc	sp
   02FB D5            [11]  585 	push	de
   02FC 33            [ 6]  586 	inc	sp
   02FD CDr74r00      [17]  587 	call	_write_char
   0300 21 06 00      [10]  588 	ld	hl, #6
   0303 39            [11]  589 	add	hl, sp
   0304 F9            [ 6]  590 	ld	sp, hl
   0305 D1            [10]  591 	pop	de
   0306 C1            [10]  592 	pop	bc
                            593 ;boot_rom.c:105: for (char j = 0; j < 3; j++)
   0307 DD 34 FE      [23]  594 	inc	-2 (ix)
   030A 18 92         [12]  595 	jr	00112$
   030C                     596 00101$:
                            597 ;boot_rom.c:109: m <<= 1;
   030C DD 7E FB      [19]  598 	ld	a, -5 (ix)
   030F 87            [ 4]  599 	add	a, a
   0310 DD 77 FB      [19]  600 	ld	-5 (ix), a
                            601 ;boot_rom.c:102: for (char i = 0; i < 8; i++)
   0313 DD 34 FA      [23]  602 	inc	-6 (ix)
   0316 C3r74r02      [10]  603 	jp	00115$
   0319                     604 00119$:
                            605 ;boot_rom.c:99: for (char b = 0; b < 2; b++)
   0319 1C            [ 4]  606 	inc	e
   031A C3r66r02      [10]  607 	jp	00118$
   031D                     608 00103$:
                            609 ;boot_rom.c:113: y += 6;
   031D 21 06 00      [10]  610 	ld	hl, #0x0006
   0320 09            [11]  611 	add	hl, bc
   0321 DD 75 FC      [19]  612 	ld	-4 (ix), l
   0324 DD 74 FD      [19]  613 	ld	-3 (ix), h
                            614 ;boot_rom.c:115: char m = 0b00000001;
   0327 DD 36 F6 01   [19]  615 	ld	-10 (ix), #0x01
                            616 ;boot_rom.c:117: for (char j = 0; j < 8; j++)
   032B 21 00 00      [10]  617 	ld	hl, #0x0000
   032E 39            [11]  618 	add	hl, sp
   032F DD 75 F2      [19]  619 	ld	-14 (ix), l
   0332 DD 74 F3      [19]  620 	ld	-13 (ix), h
   0335 DD 7E F2      [19]  621 	ld	a, -14 (ix)
   0338 DD 77 F4      [19]  622 	ld	-12 (ix), a
   033B DD 7E F3      [19]  623 	ld	a, -13 (ix)
   033E DD 77 F5      [19]  624 	ld	-11 (ix), a
   0341 DD 36 FF 00   [19]  625 	ld	-1 (ix), #0x00
   0345                     626 00121$:
   0345 DD 7E FF      [19]  627 	ld	a, -1 (ix)
   0348 D6 08         [ 7]  628 	sub	a, #0x08
   034A 30 69         [12]  629 	jr	NC,00106$
                            630 ;boot_rom.c:119: signed char jx = analog[(j * 16)];
   034C DD 6E FF      [19]  631 	ld	l, -1 (ix)
   034F 26 00         [ 7]  632 	ld	h, #0x00
   0351 29            [11]  633 	add	hl, hl
   0352 29            [11]  634 	add	hl, hl
   0353 29            [11]  635 	add	hl, hl
   0354 29            [11]  636 	add	hl, hl
   0355 11 00 71      [10]  637 	ld	de, #_analog
   0358 19            [11]  638 	add	hl, de
   0359 4E            [ 7]  639 	ld	c, (hl)
                            640 ;boot_rom.c:120: signed char jy = analog[(j * 16) + 8];
   035A DD 7E FF      [19]  641 	ld	a, -1 (ix)
   035D 07            [ 4]  642 	rlca
   035E 07            [ 4]  643 	rlca
   035F 07            [ 4]  644 	rlca
   0360 07            [ 4]  645 	rlca
   0361 E6 F0         [ 7]  646 	and	a, #0xf0
   0363 C6 08         [ 7]  647 	add	a, #0x08
   0365 5F            [ 4]  648 	ld	e, a
   0366 17            [ 4]  649 	rla
   0367 9F            [ 4]  650 	sbc	a, a
   0368 57            [ 4]  651 	ld	d, a
   0369 21 00 71      [10]  652 	ld	hl, #_analog
   036C 19            [11]  653 	add	hl, de
   036D 7E            [ 7]  654 	ld	a, (hl)
                            655 ;boot_rom.c:121: sprintf(str, "%d,%d", jx, jy);
   036E 5F            [ 4]  656 	ld	e, a
   036F 17            [ 4]  657 	rla
   0370 9F            [ 4]  658 	sbc	a, a
   0371 57            [ 4]  659 	ld	d, a
   0372 79            [ 4]  660 	ld	a, c
   0373 17            [ 4]  661 	rla
   0374 9F            [ 4]  662 	sbc	a, a
   0375 47            [ 4]  663 	ld	b, a
   0376 DD 6E F2      [19]  664 	ld	l, -14 (ix)
   0379 DD 66 F3      [19]  665 	ld	h, -13 (ix)
   037C D5            [11]  666 	push	de
   037D C5            [11]  667 	push	bc
   037E 01rE0r03      [10]  668 	ld	bc, #___str_5
   0381 C5            [11]  669 	push	bc
   0382 E5            [11]  670 	push	hl
   0383 CDr00r00      [17]  671 	call	_sprintf
   0386 21 08 00      [10]  672 	ld	hl, #8
   0389 39            [11]  673 	add	hl, sp
   038A F9            [ 6]  674 	ld	sp, hl
                            675 ;boot_rom.c:122: write_string(str, 0xFF, 5, y);
   038B DD 4E F4      [19]  676 	ld	c, -12 (ix)
   038E DD 46 F5      [19]  677 	ld	b, -11 (ix)
   0391 DD 6E FC      [19]  678 	ld	l, -4 (ix)
   0394 DD 66 FD      [19]  679 	ld	h, -3 (ix)
   0397 E5            [11]  680 	push	hl
   0398 21 05 00      [10]  681 	ld	hl, #0x0005
   039B E5            [11]  682 	push	hl
   039C 3E FF         [ 7]  683 	ld	a, #0xff
   039E F5            [11]  684 	push	af
   039F 33            [ 6]  685 	inc	sp
   03A0 C5            [11]  686 	push	bc
   03A1 CDr17r00      [17]  687 	call	_write_string
   03A4 21 07 00      [10]  688 	ld	hl, #7
   03A7 39            [11]  689 	add	hl, sp
   03A8 F9            [ 6]  690 	ld	sp, hl
                            691 ;boot_rom.c:123: m <<= 1;
   03A9 DD 7E F6      [19]  692 	ld	a, -10 (ix)
   03AC 87            [ 4]  693 	add	a, a
   03AD DD 77 F6      [19]  694 	ld	-10 (ix), a
                            695 ;boot_rom.c:117: for (char j = 0; j < 8; j++)
   03B0 DD 34 FF      [23]  696 	inc	-1 (ix)
   03B3 18 90         [12]  697 	jr	00121$
   03B5                     698 00106$:
                            699 ;boot_rom.c:126: hsync_last = hsync;
   03B5 3Ar02r00      [13]  700 	ld	a,(#_hsync + 0)
   03B8 32r03r00      [13]  701 	ld	(#_hsync_last + 0),a
                            702 ;boot_rom.c:127: vsync_last = vsync;
   03BB 3Ar04r00      [13]  703 	ld	a,(#_vsync + 0)
   03BE 32r05r00      [13]  704 	ld	(#_vsync_last + 0),a
                            705 ;boot_rom.c:129: }
   03C1 C3r24r02      [10]  706 	jp	00109$
   03C4                     707 ___str_4:
   03C4 2D 2D 2D 20 4D 69   708 	.ascii "--- MiSTer Input Tester ---"
        53 54 65 72 20 49
        6E 70 75 74 20 54
        65 73 74 65 72 20
        2D 2D 2D
   03DF 00                  709 	.db 0x00
   03E0                     710 ___str_5:
   03E0 25 64 2C 25 64      711 	.ascii "%d,%d"
   03E5 00                  712 	.db 0x00
                            713 	.area _CODE
                            714 	.area _INITIALIZER
   0000                     715 __xinit__asc_0:
   0000 30                  716 	.db #0x30	; 48	'0'
   0001                     717 __xinit__asc_1:
   0001 31                  718 	.db #0x31	; 49	'1'
                            719 	.area _CABS (ABS)
