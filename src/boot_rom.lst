                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.8.0 #10562 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module boot_rom
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _page_inputs
                             13 	.globl _page_border
                             14 	.globl _write_char
                             15 	.globl _write_string
                             16 	.globl _clear_chars
                             17 	.globl _strlen
                             18 	.globl _sprintf
                             19 	.globl _asc_1
                             20 	.globl _asc_0
                             21 	.globl _vsync_last
                             22 	.globl _vsync
                             23 	.globl _hsync_last
                             24 	.globl _hsync
                             25 	.globl _chram_size
                             26 	.globl _colram
                             27 	.globl _chram
                             28 	.globl _analog
                             29 	.globl _joystick
                             30 	.globl _input0
                             31 	.globl _chram_rows
                             32 	.globl _chram_cols
                             33 ;--------------------------------------------------------
                             34 ; special function registers
                             35 ;--------------------------------------------------------
                             36 ;--------------------------------------------------------
                             37 ; ram data
                             38 ;--------------------------------------------------------
                             39 	.area _DATA
                     6000    40 _input0	=	0x6000
                     7000    41 _joystick	=	0x7000
                     7100    42 _analog	=	0x7100
                     8000    43 _chram	=	0x8000
                     8800    44 _colram	=	0x8800
   0000                      45 _chram_size::
   0000                      46 	.ds 2
   0002                      47 _hsync::
   0002                      48 	.ds 1
   0003                      49 _hsync_last::
   0003                      50 	.ds 1
   0004                      51 _vsync::
   0004                      52 	.ds 1
   0005                      53 _vsync_last::
   0005                      54 	.ds 1
                             55 ;--------------------------------------------------------
                             56 ; ram data
                             57 ;--------------------------------------------------------
                             58 	.area _INITIALIZED
   0000                      59 _asc_0::
   0000                      60 	.ds 1
   0001                      61 _asc_1::
   0001                      62 	.ds 1
                             63 ;--------------------------------------------------------
                             64 ; absolute external ram data
                             65 ;--------------------------------------------------------
                             66 	.area _DABS (ABS)
                             67 ;--------------------------------------------------------
                             68 ; global & static initialisations
                             69 ;--------------------------------------------------------
                             70 	.area _HOME
                             71 	.area _GSINIT
                             72 	.area _GSFINAL
                             73 	.area _GSINIT
                             74 ;--------------------------------------------------------
                             75 ; Home
                             76 ;--------------------------------------------------------
                             77 	.area _HOME
                             78 	.area _HOME
                             79 ;--------------------------------------------------------
                             80 ; code
                             81 ;--------------------------------------------------------
                             82 	.area _CODE
                             83 ;boot_rom.c:22: void clear_chars()
                             84 ;	---------------------------------
                             85 ; Function clear_chars
                             86 ; ---------------------------------
   0000                      87 _clear_chars::
                             88 ;boot_rom.c:24: for (unsigned int p = 0; p < chram_size; p++)
   0000 01 00 00      [10]   89 	ld	bc, #0x0000
   0003                      90 00103$:
   0003 21r00r00      [10]   91 	ld	hl, #_chram_size
   0006 79            [ 4]   92 	ld	a, c
   0007 96            [ 7]   93 	sub	a, (hl)
   0008 78            [ 4]   94 	ld	a, b
   0009 23            [ 6]   95 	inc	hl
   000A 9E            [ 7]   96 	sbc	a, (hl)
   000B D0            [11]   97 	ret	NC
                             98 ;boot_rom.c:26: chram[p] = 0;
   000C 21 00 80      [10]   99 	ld	hl, #_chram+0
   000F 09            [11]  100 	add	hl, bc
   0010 36 00         [10]  101 	ld	(hl), #0x00
                            102 ;boot_rom.c:24: for (unsigned int p = 0; p < chram_size; p++)
   0012 03            [ 6]  103 	inc	bc
                            104 ;boot_rom.c:28: }
   0013 18 EE         [12]  105 	jr	00103$
   0015                     106 _chram_cols:
   0015 40                  107 	.db #0x40	; 64
   0016                     108 _chram_rows:
   0016 20                  109 	.db #0x20	; 32
                            110 ;boot_rom.c:30: void write_string(const char *string, char color, unsigned int x, unsigned int y)
                            111 ;	---------------------------------
                            112 ; Function write_string
                            113 ; ---------------------------------
   0017                     114 _write_string::
   0017 DD E5         [15]  115 	push	ix
   0019 DD 21 00 00   [14]  116 	ld	ix,#0
   001D DD 39         [15]  117 	add	ix,sp
   001F F5            [11]  118 	push	af
                            119 ;boot_rom.c:32: unsigned int p = (y * chram_cols) + x;
   0020 21r15r00      [10]  120 	ld	hl,#_chram_cols + 0
   0023 4E            [ 7]  121 	ld	c, (hl)
   0024 06 00         [ 7]  122 	ld	b, #0x00
   0026 C5            [11]  123 	push	bc
   0027 DD 6E 09      [19]  124 	ld	l, 9 (ix)
   002A DD 66 0A      [19]  125 	ld	h, 10 (ix)
   002D E5            [11]  126 	push	hl
   002E CDr00r00      [17]  127 	call	__mulint
   0031 F1            [10]  128 	pop	af
   0032 F1            [10]  129 	pop	af
   0033 4D            [ 4]  130 	ld	c, l
   0034 44            [ 4]  131 	ld	b, h
   0035 DD 6E 07      [19]  132 	ld	l, 7 (ix)
   0038 DD 66 08      [19]  133 	ld	h, 8 (ix)
   003B 09            [11]  134 	add	hl, bc
   003C EB            [ 4]  135 	ex	de,hl
                            136 ;boot_rom.c:33: unsigned char l = strlen(string);
   003D DD 6E 04      [19]  137 	ld	l, 4 (ix)
   0040 DD 66 05      [19]  138 	ld	h, 5 (ix)
   0043 E5            [11]  139 	push	hl
   0044 CDr00r00      [17]  140 	call	_strlen
   0047 F1            [10]  141 	pop	af
   0048 4D            [ 4]  142 	ld	c, l
                            143 ;boot_rom.c:34: for (char c = 0; c < l; c++)
   0049 06 00         [ 7]  144 	ld	b, #0x00
   004B                     145 00103$:
   004B 78            [ 4]  146 	ld	a, b
   004C 91            [ 4]  147 	sub	a, c
   004D 30 20         [12]  148 	jr	NC,00105$
                            149 ;boot_rom.c:36: chram[p] = string[c];
   004F 21 00 80      [10]  150 	ld	hl, #_chram
   0052 19            [11]  151 	add	hl, de
   0053 E3            [19]  152 	ex	(sp), hl
   0054 DD 7E 04      [19]  153 	ld	a, 4 (ix)
   0057 80            [ 4]  154 	add	a, b
   0058 6F            [ 4]  155 	ld	l, a
   0059 DD 7E 05      [19]  156 	ld	a, 5 (ix)
   005C CE 00         [ 7]  157 	adc	a, #0x00
   005E 67            [ 4]  158 	ld	h, a
   005F 7E            [ 7]  159 	ld	a, (hl)
   0060 E1            [10]  160 	pop	hl
   0061 E5            [11]  161 	push	hl
   0062 77            [ 7]  162 	ld	(hl), a
                            163 ;boot_rom.c:37: colram[p] = color;
   0063 21 00 88      [10]  164 	ld	hl, #_colram
   0066 19            [11]  165 	add	hl, de
   0067 DD 7E 06      [19]  166 	ld	a, 6 (ix)
   006A 77            [ 7]  167 	ld	(hl), a
                            168 ;boot_rom.c:38: p++;
   006B 13            [ 6]  169 	inc	de
                            170 ;boot_rom.c:34: for (char c = 0; c < l; c++)
   006C 04            [ 4]  171 	inc	b
   006D 18 DC         [12]  172 	jr	00103$
   006F                     173 00105$:
                            174 ;boot_rom.c:40: }
   006F DD F9         [10]  175 	ld	sp, ix
   0071 DD E1         [14]  176 	pop	ix
   0073 C9            [10]  177 	ret
                            178 ;boot_rom.c:42: void write_char(unsigned char c, char color, unsigned int x, unsigned int y)
                            179 ;	---------------------------------
                            180 ; Function write_char
                            181 ; ---------------------------------
   0074                     182 _write_char::
   0074 DD E5         [15]  183 	push	ix
   0076 DD 21 00 00   [14]  184 	ld	ix,#0
   007A DD 39         [15]  185 	add	ix,sp
                            186 ;boot_rom.c:44: unsigned int p = (y * chram_cols) + x;
   007C 21r15r00      [10]  187 	ld	hl,#_chram_cols + 0
   007F 4E            [ 7]  188 	ld	c, (hl)
   0080 06 00         [ 7]  189 	ld	b, #0x00
   0082 C5            [11]  190 	push	bc
   0083 DD 6E 08      [19]  191 	ld	l, 8 (ix)
   0086 DD 66 09      [19]  192 	ld	h, 9 (ix)
   0089 E5            [11]  193 	push	hl
   008A CDr00r00      [17]  194 	call	__mulint
   008D F1            [10]  195 	pop	af
   008E F1            [10]  196 	pop	af
   008F 4D            [ 4]  197 	ld	c, l
   0090 44            [ 4]  198 	ld	b, h
   0091 DD 6E 06      [19]  199 	ld	l, 6 (ix)
   0094 DD 66 07      [19]  200 	ld	h, 7 (ix)
   0097 09            [11]  201 	add	hl, bc
   0098 4D            [ 4]  202 	ld	c, l
   0099 44            [ 4]  203 	ld	b, h
                            204 ;boot_rom.c:45: chram[p] = c;
   009A 21 00 80      [10]  205 	ld	hl, #_chram+0
   009D 09            [11]  206 	add	hl, bc
   009E DD 7E 04      [19]  207 	ld	a, 4 (ix)
   00A1 77            [ 7]  208 	ld	(hl), a
                            209 ;boot_rom.c:46: colram[p] = color;
   00A2 21 00 88      [10]  210 	ld	hl, #_colram+0
   00A5 09            [11]  211 	add	hl, bc
   00A6 DD 7E 05      [19]  212 	ld	a, 5 (ix)
   00A9 77            [ 7]  213 	ld	(hl), a
                            214 ;boot_rom.c:47: }
   00AA DD E1         [14]  215 	pop	ix
   00AC C9            [10]  216 	ret
                            217 ;boot_rom.c:49: void page_border(char color)
                            218 ;	---------------------------------
                            219 ; Function page_border
                            220 ; ---------------------------------
   00AD                     221 _page_border::
   00AD DD E5         [15]  222 	push	ix
   00AF DD 21 00 00   [14]  223 	ld	ix,#0
   00B3 DD 39         [15]  224 	add	ix,sp
                            225 ;boot_rom.c:51: write_char(128, color, 0, 0);
   00B5 21 00 00      [10]  226 	ld	hl, #0x0000
   00B8 E5            [11]  227 	push	hl
   00B9 2E 00         [ 7]  228 	ld	l, #0x00
   00BB E5            [11]  229 	push	hl
   00BC DD 56 04      [19]  230 	ld	d, 4 (ix)
   00BF 1E 80         [ 7]  231 	ld	e,#0x80
   00C1 D5            [11]  232 	push	de
   00C2 CDr74r00      [17]  233 	call	_write_char
   00C5 21 06 00      [10]  234 	ld	hl, #6
   00C8 39            [11]  235 	add	hl, sp
   00C9 F9            [ 6]  236 	ld	sp, hl
                            237 ;boot_rom.c:52: write_char(130, color, 39, 0);
   00CA 21 00 00      [10]  238 	ld	hl, #0x0000
   00CD E5            [11]  239 	push	hl
   00CE 2E 27         [ 7]  240 	ld	l, #0x27
   00D0 E5            [11]  241 	push	hl
   00D1 DD 56 04      [19]  242 	ld	d, 4 (ix)
   00D4 1E 82         [ 7]  243 	ld	e,#0x82
   00D6 D5            [11]  244 	push	de
   00D7 CDr74r00      [17]  245 	call	_write_char
   00DA 21 06 00      [10]  246 	ld	hl, #6
   00DD 39            [11]  247 	add	hl, sp
   00DE F9            [ 6]  248 	ld	sp, hl
                            249 ;boot_rom.c:53: write_char(133, color, 0, 29);
   00DF 21 1D 00      [10]  250 	ld	hl, #0x001d
   00E2 E5            [11]  251 	push	hl
   00E3 2E 00         [ 7]  252 	ld	l, #0x00
   00E5 E5            [11]  253 	push	hl
   00E6 DD 56 04      [19]  254 	ld	d, 4 (ix)
   00E9 1E 85         [ 7]  255 	ld	e,#0x85
   00EB D5            [11]  256 	push	de
   00EC CDr74r00      [17]  257 	call	_write_char
   00EF 21 06 00      [10]  258 	ld	hl, #6
   00F2 39            [11]  259 	add	hl, sp
   00F3 F9            [ 6]  260 	ld	sp, hl
                            261 ;boot_rom.c:54: write_char(132, color, 39, 29);
   00F4 21 1D 00      [10]  262 	ld	hl, #0x001d
   00F7 E5            [11]  263 	push	hl
   00F8 2E 27         [ 7]  264 	ld	l, #0x27
   00FA E5            [11]  265 	push	hl
   00FB DD 56 04      [19]  266 	ld	d, 4 (ix)
   00FE 1E 84         [ 7]  267 	ld	e,#0x84
   0100 D5            [11]  268 	push	de
   0101 CDr74r00      [17]  269 	call	_write_char
   0104 21 06 00      [10]  270 	ld	hl, #6
   0107 39            [11]  271 	add	hl, sp
   0108 F9            [ 6]  272 	ld	sp, hl
                            273 ;boot_rom.c:55: for (char x = 1; x < 39; x++)
   0109 0E 01         [ 7]  274 	ld	c, #0x01
   010B                     275 00104$:
   010B 79            [ 4]  276 	ld	a, c
   010C D6 27         [ 7]  277 	sub	a, #0x27
   010E 30 30         [12]  278 	jr	NC,00101$
                            279 ;boot_rom.c:57: write_char(129, color, x, 0);
   0110 59            [ 4]  280 	ld	e, c
   0111 16 00         [ 7]  281 	ld	d, #0x00
   0113 C5            [11]  282 	push	bc
   0114 D5            [11]  283 	push	de
   0115 21 00 00      [10]  284 	ld	hl, #0x0000
   0118 E5            [11]  285 	push	hl
   0119 D5            [11]  286 	push	de
   011A DD 56 04      [19]  287 	ld	d, 4 (ix)
   011D 1E 81         [ 7]  288 	ld	e,#0x81
   011F D5            [11]  289 	push	de
   0120 CDr74r00      [17]  290 	call	_write_char
   0123 21 06 00      [10]  291 	ld	hl, #6
   0126 39            [11]  292 	add	hl, sp
   0127 F9            [ 6]  293 	ld	sp, hl
   0128 D1            [10]  294 	pop	de
   0129 21 1D 00      [10]  295 	ld	hl, #0x001d
   012C E5            [11]  296 	push	hl
   012D D5            [11]  297 	push	de
   012E DD 56 04      [19]  298 	ld	d, 4 (ix)
   0131 1E 81         [ 7]  299 	ld	e,#0x81
   0133 D5            [11]  300 	push	de
   0134 CDr74r00      [17]  301 	call	_write_char
   0137 21 06 00      [10]  302 	ld	hl, #6
   013A 39            [11]  303 	add	hl, sp
   013B F9            [ 6]  304 	ld	sp, hl
   013C C1            [10]  305 	pop	bc
                            306 ;boot_rom.c:55: for (char x = 1; x < 39; x++)
   013D 0C            [ 4]  307 	inc	c
   013E 18 CB         [12]  308 	jr	00104$
   0140                     309 00101$:
                            310 ;boot_rom.c:60: for (char y = 1; y < 29; y++)
   0140 0E 01         [ 7]  311 	ld	c, #0x01
   0142                     312 00107$:
   0142 79            [ 4]  313 	ld	a, c
   0143 D6 1D         [ 7]  314 	sub	a, #0x1d
   0145 30 2E         [12]  315 	jr	NC,00109$
                            316 ;boot_rom.c:62: write_char(131, color, 0, y);
   0147 59            [ 4]  317 	ld	e, c
   0148 16 00         [ 7]  318 	ld	d, #0x00
   014A C5            [11]  319 	push	bc
   014B D5            [11]  320 	push	de
   014C D5            [11]  321 	push	de
   014D 21 00 00      [10]  322 	ld	hl, #0x0000
   0150 E5            [11]  323 	push	hl
   0151 DD 56 04      [19]  324 	ld	d, 4 (ix)
   0154 1E 83         [ 7]  325 	ld	e,#0x83
   0156 D5            [11]  326 	push	de
   0157 CDr74r00      [17]  327 	call	_write_char
   015A 21 06 00      [10]  328 	ld	hl, #6
   015D 39            [11]  329 	add	hl, sp
   015E F9            [ 6]  330 	ld	sp, hl
   015F 21 27 00      [10]  331 	ld	hl, #0x0027
   0162 E5            [11]  332 	push	hl
   0163 DD 56 04      [19]  333 	ld	d, 4 (ix)
   0166 1E 83         [ 7]  334 	ld	e,#0x83
   0168 D5            [11]  335 	push	de
   0169 CDr74r00      [17]  336 	call	_write_char
   016C 21 06 00      [10]  337 	ld	hl, #6
   016F 39            [11]  338 	add	hl, sp
   0170 F9            [ 6]  339 	ld	sp, hl
   0171 C1            [10]  340 	pop	bc
                            341 ;boot_rom.c:60: for (char y = 1; y < 29; y++)
   0172 0C            [ 4]  342 	inc	c
   0173 18 CD         [12]  343 	jr	00107$
   0175                     344 00109$:
                            345 ;boot_rom.c:65: }
   0175 DD E1         [14]  346 	pop	ix
   0177 C9            [10]  347 	ret
                            348 ;boot_rom.c:67: void page_inputs()
                            349 ;	---------------------------------
                            350 ; Function page_inputs
                            351 ; ---------------------------------
   0178                     352 _page_inputs::
   0178 DD E5         [15]  353 	push	ix
   017A DD 21 00 00   [14]  354 	ld	ix,#0
   017E DD 39         [15]  355 	add	ix,sp
   0180 21 F6 FF      [10]  356 	ld	hl, #-10
   0183 39            [11]  357 	add	hl, sp
   0184 F9            [ 6]  358 	ld	sp, hl
                            359 ;boot_rom.c:69: clear_chars();
   0185 CDr00r00      [17]  360 	call	_clear_chars
                            361 ;boot_rom.c:70: page_border(0b00000111);
   0188 3E 07         [ 7]  362 	ld	a, #0x07
   018A F5            [11]  363 	push	af
   018B 33            [ 6]  364 	inc	sp
   018C CDrADr00      [17]  365 	call	_page_border
   018F 33            [ 6]  366 	inc	sp
                            367 ;boot_rom.c:71: write_string("UDLRABCXYZLRSs", 0xFF, 7, 3);
   0190 21 03 00      [10]  368 	ld	hl, #0x0003
   0193 E5            [11]  369 	push	hl
   0194 2E 07         [ 7]  370 	ld	l, #0x07
   0196 E5            [11]  371 	push	hl
   0197 3E FF         [ 7]  372 	ld	a, #0xff
   0199 F5            [11]  373 	push	af
   019A 33            [ 6]  374 	inc	sp
   019B 21r2Ar02      [10]  375 	ld	hl, #___str_0
   019E E5            [11]  376 	push	hl
   019F CDr17r00      [17]  377 	call	_write_string
   01A2 21 07 00      [10]  378 	ld	hl, #7
   01A5 39            [11]  379 	add	hl, sp
   01A6 F9            [ 6]  380 	ld	sp, hl
                            381 ;boot_rom.c:72: write_string("AX  AY", 0xFF, 25, 3);
   01A7 21 03 00      [10]  382 	ld	hl, #0x0003
   01AA E5            [11]  383 	push	hl
   01AB 2E 19         [ 7]  384 	ld	l, #0x19
   01AD E5            [11]  385 	push	hl
   01AE 3E FF         [ 7]  386 	ld	a, #0xff
   01B0 F5            [11]  387 	push	af
   01B1 33            [ 6]  388 	inc	sp
   01B2 21r39r02      [10]  389 	ld	hl, #___str_1
   01B5 E5            [11]  390 	push	hl
   01B6 CDr17r00      [17]  391 	call	_write_string
   01B9 21 07 00      [10]  392 	ld	hl, #7
   01BC 39            [11]  393 	add	hl, sp
   01BD F9            [ 6]  394 	ld	sp, hl
                            395 ;boot_rom.c:75: for (unsigned char j = 0; j < 6; j++)
   01BE 21 00 00      [10]  396 	ld	hl, #0x0000
   01C1 39            [11]  397 	add	hl, sp
   01C2 DD 75 FD      [19]  398 	ld	-3 (ix), l
   01C5 DD 74 FE      [19]  399 	ld	-2 (ix), h
   01C8 DD 7E FD      [19]  400 	ld	a, -3 (ix)
   01CB DD 77 FB      [19]  401 	ld	-5 (ix), a
   01CE DD 7E FE      [19]  402 	ld	a, -2 (ix)
   01D1 DD 77 FC      [19]  403 	ld	-4 (ix), a
   01D4 DD 36 FF 00   [19]  404 	ld	-1 (ix), #0x00
   01D8                     405 00103$:
   01D8 DD 7E FF      [19]  406 	ld	a, -1 (ix)
   01DB D6 06         [ 7]  407 	sub	a, #0x06
   01DD 30 46         [12]  408 	jr	NC,00105$
                            409 ;boot_rom.c:77: sprintf(label, "JOY%d", j + 1);
   01DF DD 4E FF      [19]  410 	ld	c, -1 (ix)
   01E2 06 00         [ 7]  411 	ld	b, #0x00
   01E4 59            [ 4]  412 	ld	e, c
   01E5 50            [ 4]  413 	ld	d, b
   01E6 13            [ 6]  414 	inc	de
   01E7 DD 6E FD      [19]  415 	ld	l, -3 (ix)
   01EA DD 66 FE      [19]  416 	ld	h, -2 (ix)
   01ED C5            [11]  417 	push	bc
   01EE D5            [11]  418 	push	de
   01EF 11r40r02      [10]  419 	ld	de, #___str_2
   01F2 D5            [11]  420 	push	de
   01F3 E5            [11]  421 	push	hl
   01F4 CDr00r00      [17]  422 	call	_sprintf
   01F7 21 06 00      [10]  423 	ld	hl, #6
   01FA 39            [11]  424 	add	hl, sp
   01FB F9            [ 6]  425 	ld	sp, hl
   01FC C1            [10]  426 	pop	bc
                            427 ;boot_rom.c:78: write_string(label, 0xFF - (j*2), 2, 4 + j);
   01FD 03            [ 6]  428 	inc	bc
   01FE 03            [ 6]  429 	inc	bc
   01FF 03            [ 6]  430 	inc	bc
   0200 03            [ 6]  431 	inc	bc
   0201 DD 7E FF      [19]  432 	ld	a, -1 (ix)
   0204 87            [ 4]  433 	add	a, a
   0205 5F            [ 4]  434 	ld	e, a
   0206 3E FF         [ 7]  435 	ld	a, #0xff
   0208 93            [ 4]  436 	sub	a, e
   0209 67            [ 4]  437 	ld	h, a
   020A DD 5E FB      [19]  438 	ld	e, -5 (ix)
   020D DD 56 FC      [19]  439 	ld	d, -4 (ix)
   0210 C5            [11]  440 	push	bc
   0211 01 02 00      [10]  441 	ld	bc, #0x0002
   0214 C5            [11]  442 	push	bc
   0215 E5            [11]  443 	push	hl
   0216 33            [ 6]  444 	inc	sp
   0217 D5            [11]  445 	push	de
   0218 CDr17r00      [17]  446 	call	_write_string
   021B 21 07 00      [10]  447 	ld	hl, #7
   021E 39            [11]  448 	add	hl, sp
   021F F9            [ 6]  449 	ld	sp, hl
                            450 ;boot_rom.c:75: for (unsigned char j = 0; j < 6; j++)
   0220 DD 34 FF      [23]  451 	inc	-1 (ix)
   0223 18 B3         [12]  452 	jr	00103$
   0225                     453 00105$:
                            454 ;boot_rom.c:80: }
   0225 DD F9         [10]  455 	ld	sp, ix
   0227 DD E1         [14]  456 	pop	ix
   0229 C9            [10]  457 	ret
   022A                     458 ___str_0:
   022A 55 44 4C 52 41 42   459 	.ascii "UDLRABCXYZLRSs"
        43 58 59 5A 4C 52
        53 73
   0238 00                  460 	.db 0x00
   0239                     461 ___str_1:
   0239 41 58 20 20 41 59   462 	.ascii "AX  AY"
   023F 00                  463 	.db 0x00
   0240                     464 ___str_2:
   0240 4A 4F 59 25 64      465 	.ascii "JOY%d"
   0245 00                  466 	.db 0x00
                            467 ;boot_rom.c:85: void main()
                            468 ;	---------------------------------
                            469 ; Function main
                            470 ; ---------------------------------
   0246                     471 _main::
   0246 DD E5         [15]  472 	push	ix
   0248 DD 21 00 00   [14]  473 	ld	ix,#0
   024C DD 39         [15]  474 	add	ix,sp
   024E 21 EC FF      [10]  475 	ld	hl, #-20
   0251 39            [11]  476 	add	hl, sp
   0252 F9            [ 6]  477 	ld	sp, hl
                            478 ;boot_rom.c:87: chram_size = chram_cols * chram_rows;
   0253 21r16r00      [10]  479 	ld	hl,#_chram_rows + 0
   0256 5E            [ 7]  480 	ld	e, (hl)
   0257 21r15r00      [10]  481 	ld	hl,#_chram_cols + 0
   025A 66            [ 7]  482 	ld	h, (hl)
   025B 2E 00         [ 7]  483 	ld	l, #0x00
   025D 55            [ 4]  484 	ld	d, l
   025E 06 08         [ 7]  485 	ld	b, #0x08
   0260                     486 00191$:
   0260 29            [11]  487 	add	hl, hl
   0261 30 01         [12]  488 	jr	NC,00192$
   0263 19            [11]  489 	add	hl, de
   0264                     490 00192$:
   0264 10 FA         [13]  491 	djnz	00191$
   0266 22r00r00      [16]  492 	ld	(_chram_size), hl
                            493 ;boot_rom.c:89: page_inputs();
   0269 CDr78r01      [17]  494 	call	_page_inputs
                            495 ;boot_rom.c:91: while (1)
   026C DD 36 FB AB   [19]  496 	ld	-5 (ix), #0xab
   0270                     497 00109$:
                            498 ;boot_rom.c:93: hsync = input0 & 0x80;
   0270 3A 00 60      [13]  499 	ld	a,(#_input0 + 0)
   0273 E6 80         [ 7]  500 	and	a, #0x80
   0275 32r02r00      [13]  501 	ld	(#_hsync + 0),a
                            502 ;boot_rom.c:94: vsync = input0 & 0x40;
   0278 3A 00 60      [13]  503 	ld	a,(#_input0 + 0)
   027B E6 40         [ 7]  504 	and	a, #0x40
   027D FD 21r04r00   [14]  505 	ld	iy, #_vsync
   0281 FD 77 00      [19]  506 	ld	0 (iy), a
                            507 ;boot_rom.c:99: if (vsync && !vsync_last)
   0284 FD 7E 00      [19]  508 	ld	a, 0 (iy)
   0287 B7            [ 4]  509 	or	a, a
   0288 CAr29r04      [10]  510 	jp	Z, 00106$
   028B 3Ar05r00      [13]  511 	ld	a,(#_vsync_last + 0)
   028E B7            [ 4]  512 	or	a, a
   028F C2r29r04      [10]  513 	jp	NZ, 00106$
                            514 ;boot_rom.c:101: color++;
   0292 DD 34 FB      [23]  515 	inc	-5 (ix)
                            516 ;boot_rom.c:102: write_string("--- MiSTer Input Tester ---", color, 6, 1);
   0295 21 01 00      [10]  517 	ld	hl, #0x0001
   0298 E5            [11]  518 	push	hl
   0299 2E 06         [ 7]  519 	ld	l, #0x06
   029B E5            [11]  520 	push	hl
   029C DD 7E FB      [19]  521 	ld	a, -5 (ix)
   029F F5            [11]  522 	push	af
   02A0 33            [ 6]  523 	inc	sp
   02A1 21r38r04      [10]  524 	ld	hl, #___str_3
   02A4 E5            [11]  525 	push	hl
   02A5 CDr17r00      [17]  526 	call	_write_string
   02A8 21 07 00      [10]  527 	ld	hl, #7
   02AB 39            [11]  528 	add	hl, sp
   02AC F9            [ 6]  529 	ld	sp, hl
                            530 ;boot_rom.c:104: for (char b = 0; b < 2; b++)
   02AD 0E 00         [ 7]  531 	ld	c, #0x00
   02AF                     532 00118$:
   02AF 79            [ 4]  533 	ld	a, c
   02B0 D6 02         [ 7]  534 	sub	a, #0x02
   02B2 D2r49r03      [10]  535 	jp	NC, 00103$
                            536 ;boot_rom.c:106: char m = 0b00000001;
   02B5 06 01         [ 7]  537 	ld	b, #0x01
                            538 ;boot_rom.c:107: for (char i = 0; i < 8; i++)
   02B7 1E 00         [ 7]  539 	ld	e, #0x00
   02B9                     540 00115$:
                            541 ;boot_rom.c:109: char x = 7 + i + (b * 8);
   02B9 7B            [ 4]  542 	ld	a,e
   02BA FE 08         [ 7]  543 	cp	a,#0x08
   02BC D2r45r03      [10]  544 	jp	NC,00119$
   02BF C6 07         [ 7]  545 	add	a, #0x07
   02C1 57            [ 4]  546 	ld	d, a
   02C2 79            [ 4]  547 	ld	a, c
   02C3 87            [ 4]  548 	add	a, a
   02C4 87            [ 4]  549 	add	a, a
   02C5 87            [ 4]  550 	add	a, a
   02C6 DD 77 FA      [19]  551 	ld	-6 (ix), a
   02C9 7A            [ 4]  552 	ld	a, d
   02CA DD 86 FA      [19]  553 	add	a, -6 (ix)
   02CD DD 77 FF      [19]  554 	ld	-1 (ix), a
                            555 ;boot_rom.c:110: for (char j = 0; j < 6; j++)
   02D0 DD 36 FC 00   [19]  556 	ld	-4 (ix), #0x00
   02D4                     557 00112$:
   02D4 DD 7E FC      [19]  558 	ld	a, -4 (ix)
   02D7 D6 06         [ 7]  559 	sub	a, #0x06
   02D9 30 64         [12]  560 	jr	NC,00101$
                            561 ;boot_rom.c:112: write_char((joystick[(b * 8) + (j * 32)] & m) ? asc_1 : asc_0, 0xFF, x, 4 + j);
   02DB DD 7E FC      [19]  562 	ld	a, -4 (ix)
   02DE 2E 00         [ 7]  563 	ld	l, #0x00
   02E0 C6 04         [ 7]  564 	add	a, #0x04
   02E2 DD 77 F4      [19]  565 	ld	-12 (ix), a
   02E5 7D            [ 4]  566 	ld	a, l
   02E6 CE 00         [ 7]  567 	adc	a, #0x00
   02E8 DD 77 F5      [19]  568 	ld	-11 (ix), a
   02EB DD 7E FF      [19]  569 	ld	a, -1 (ix)
   02EE DD 77 F2      [19]  570 	ld	-14 (ix), a
   02F1 DD 36 F3 00   [19]  571 	ld	-13 (ix), #0x00
   02F5 DD 7E FC      [19]  572 	ld	a, -4 (ix)
   02F8 0F            [ 4]  573 	rrca
   02F9 0F            [ 4]  574 	rrca
   02FA 0F            [ 4]  575 	rrca
   02FB E6 E0         [ 7]  576 	and	a, #0xe0
   02FD DD 86 FA      [19]  577 	add	a, -6 (ix)
   0300 57            [ 4]  578 	ld	d, a
   0301 17            [ 4]  579 	rla
   0302 9F            [ 4]  580 	sbc	a, a
   0303 67            [ 4]  581 	ld	h, a
   0304 3E 00         [ 7]  582 	ld	a, #<(_joystick)
   0306 82            [ 4]  583 	add	a, d
   0307 6F            [ 4]  584 	ld	l, a
   0308 3E 70         [ 7]  585 	ld	a, #>(_joystick)
   030A 8C            [ 4]  586 	adc	a, h
   030B 67            [ 4]  587 	ld	h, a
   030C 7E            [ 7]  588 	ld	a, (hl)
   030D A0            [ 4]  589 	and	a,b
   030E 28 06         [12]  590 	jr	Z,00125$
   0310 21r01r00      [10]  591 	ld	hl,#_asc_1 + 0
   0313 56            [ 7]  592 	ld	d, (hl)
   0314 18 04         [12]  593 	jr	00126$
   0316                     594 00125$:
   0316 21r00r00      [10]  595 	ld	hl,#_asc_0 + 0
   0319 56            [ 7]  596 	ld	d, (hl)
   031A                     597 00126$:
   031A C5            [11]  598 	push	bc
   031B D5            [11]  599 	push	de
   031C DD 6E F4      [19]  600 	ld	l, -12 (ix)
   031F DD 66 F5      [19]  601 	ld	h, -11 (ix)
   0322 E5            [11]  602 	push	hl
   0323 DD 6E F2      [19]  603 	ld	l, -14 (ix)
   0326 DD 66 F3      [19]  604 	ld	h, -13 (ix)
   0329 E5            [11]  605 	push	hl
   032A 3E FF         [ 7]  606 	ld	a, #0xff
   032C F5            [11]  607 	push	af
   032D 33            [ 6]  608 	inc	sp
   032E D5            [11]  609 	push	de
   032F 33            [ 6]  610 	inc	sp
   0330 CDr74r00      [17]  611 	call	_write_char
   0333 21 06 00      [10]  612 	ld	hl, #6
   0336 39            [11]  613 	add	hl, sp
   0337 F9            [ 6]  614 	ld	sp, hl
   0338 D1            [10]  615 	pop	de
   0339 C1            [10]  616 	pop	bc
                            617 ;boot_rom.c:110: for (char j = 0; j < 6; j++)
   033A DD 34 FC      [23]  618 	inc	-4 (ix)
   033D 18 95         [12]  619 	jr	00112$
   033F                     620 00101$:
                            621 ;boot_rom.c:114: m <<= 1;
   033F CB 20         [ 8]  622 	sla	b
                            623 ;boot_rom.c:107: for (char i = 0; i < 8; i++)
   0341 1C            [ 4]  624 	inc	e
   0342 C3rB9r02      [10]  625 	jp	00115$
   0345                     626 00119$:
                            627 ;boot_rom.c:104: for (char b = 0; b < 2; b++)
   0345 0C            [ 4]  628 	inc	c
   0346 C3rAFr02      [10]  629 	jp	00118$
   0349                     630 00103$:
                            631 ;boot_rom.c:120: char m = 0b00000001;
   0349 DD 36 F2 01   [19]  632 	ld	-14 (ix), #0x01
                            633 ;boot_rom.c:122: for (char j = 0; j < 6; j++)
   034D 21 00 00      [10]  634 	ld	hl, #0x0000
   0350 39            [11]  635 	add	hl, sp
   0351 DD 75 F4      [19]  636 	ld	-12 (ix), l
   0354 DD 74 F5      [19]  637 	ld	-11 (ix), h
   0357 DD 7E F4      [19]  638 	ld	a, -12 (ix)
   035A DD 77 F8      [19]  639 	ld	-8 (ix), a
   035D DD 7E F5      [19]  640 	ld	a, -11 (ix)
   0360 DD 77 F9      [19]  641 	ld	-7 (ix), a
   0363 DD 7E F4      [19]  642 	ld	a, -12 (ix)
   0366 DD 77 F6      [19]  643 	ld	-10 (ix), a
   0369 DD 7E F5      [19]  644 	ld	a, -11 (ix)
   036C DD 77 F7      [19]  645 	ld	-9 (ix), a
   036F DD 7E F4      [19]  646 	ld	a, -12 (ix)
   0372 DD 77 F0      [19]  647 	ld	-16 (ix), a
   0375 DD 7E F5      [19]  648 	ld	a, -11 (ix)
   0378 DD 77 F1      [19]  649 	ld	-15 (ix), a
   037B DD 36 FE 00   [19]  650 	ld	-2 (ix), #0x00
   037F                     651 00121$:
   037F DD 7E FE      [19]  652 	ld	a, -2 (ix)
   0382 D6 06         [ 7]  653 	sub	a, #0x06
   0384 D2r29r04      [10]  654 	jp	NC, 00106$
                            655 ;boot_rom.c:124: signed char jx = analog[(j * 16)];
   0387 DD 6E FE      [19]  656 	ld	l, -2 (ix)
   038A 26 00         [ 7]  657 	ld	h, #0x00
   038C 29            [11]  658 	add	hl, hl
   038D 29            [11]  659 	add	hl, hl
   038E 29            [11]  660 	add	hl, hl
   038F 29            [11]  661 	add	hl, hl
   0390 11 00 71      [10]  662 	ld	de, #_analog
   0393 19            [11]  663 	add	hl, de
   0394 4E            [ 7]  664 	ld	c, (hl)
                            665 ;boot_rom.c:125: signed char jy = analog[(j * 16) + 8];
   0395 DD 7E FE      [19]  666 	ld	a, -2 (ix)
   0398 07            [ 4]  667 	rlca
   0399 07            [ 4]  668 	rlca
   039A 07            [ 4]  669 	rlca
   039B 07            [ 4]  670 	rlca
   039C E6 F0         [ 7]  671 	and	a, #0xf0
   039E C6 08         [ 7]  672 	add	a, #0x08
   03A0 5F            [ 4]  673 	ld	e, a
   03A1 17            [ 4]  674 	rla
   03A2 9F            [ 4]  675 	sbc	a, a
   03A3 57            [ 4]  676 	ld	d, a
   03A4 21 00 71      [10]  677 	ld	hl, #_analog
   03A7 19            [11]  678 	add	hl, de
   03A8 7E            [ 7]  679 	ld	a, (hl)
   03A9 DD 77 FD      [19]  680 	ld	-3 (ix), a
                            681 ;boot_rom.c:126: sprintf(str, "%d", jx);
   03AC 79            [ 4]  682 	ld	a, c
   03AD 17            [ 4]  683 	rla
   03AE 9F            [ 4]  684 	sbc	a, a
   03AF 47            [ 4]  685 	ld	b, a
   03B0 DD 5E F4      [19]  686 	ld	e, -12 (ix)
   03B3 DD 56 F5      [19]  687 	ld	d, -11 (ix)
   03B6 C5            [11]  688 	push	bc
   03B7 21r54r04      [10]  689 	ld	hl, #___str_4
   03BA E5            [11]  690 	push	hl
   03BB D5            [11]  691 	push	de
   03BC CDr00r00      [17]  692 	call	_sprintf
   03BF 21 06 00      [10]  693 	ld	hl, #6
   03C2 39            [11]  694 	add	hl, sp
   03C3 F9            [ 6]  695 	ld	sp, hl
                            696 ;boot_rom.c:127: write_string(str, 0xFF, 25, y + j);
   03C4 DD 4E FE      [19]  697 	ld	c, -2 (ix)
   03C7 06 00         [ 7]  698 	ld	b, #0x00
   03C9 03            [ 6]  699 	inc	bc
   03CA 03            [ 6]  700 	inc	bc
   03CB 03            [ 6]  701 	inc	bc
   03CC 03            [ 6]  702 	inc	bc
   03CD DD 5E F8      [19]  703 	ld	e, -8 (ix)
   03D0 DD 56 F9      [19]  704 	ld	d, -7 (ix)
   03D3 C5            [11]  705 	push	bc
   03D4 C5            [11]  706 	push	bc
   03D5 21 19 00      [10]  707 	ld	hl, #0x0019
   03D8 E5            [11]  708 	push	hl
   03D9 3E FF         [ 7]  709 	ld	a, #0xff
   03DB F5            [11]  710 	push	af
   03DC 33            [ 6]  711 	inc	sp
   03DD D5            [11]  712 	push	de
   03DE CDr17r00      [17]  713 	call	_write_string
   03E1 21 07 00      [10]  714 	ld	hl, #7
   03E4 39            [11]  715 	add	hl, sp
   03E5 F9            [ 6]  716 	ld	sp, hl
   03E6 C1            [10]  717 	pop	bc
                            718 ;boot_rom.c:128: sprintf(str, "%d", jy);
   03E7 DD 7E FD      [19]  719 	ld	a, -3 (ix)
   03EA 5F            [ 4]  720 	ld	e, a
   03EB 17            [ 4]  721 	rla
   03EC 9F            [ 4]  722 	sbc	a, a
   03ED 57            [ 4]  723 	ld	d, a
   03EE DD 6E F6      [19]  724 	ld	l, -10 (ix)
   03F1 DD 66 F7      [19]  725 	ld	h, -9 (ix)
   03F4 C5            [11]  726 	push	bc
   03F5 D5            [11]  727 	push	de
   03F6 11r54r04      [10]  728 	ld	de, #___str_4
   03F9 D5            [11]  729 	push	de
   03FA E5            [11]  730 	push	hl
   03FB CDr00r00      [17]  731 	call	_sprintf
   03FE 21 06 00      [10]  732 	ld	hl, #6
   0401 39            [11]  733 	add	hl, sp
   0402 F9            [ 6]  734 	ld	sp, hl
   0403 C1            [10]  735 	pop	bc
                            736 ;boot_rom.c:129: write_string(str, 0xFF, 29, y + j);
   0404 DD 5E F0      [19]  737 	ld	e, -16 (ix)
   0407 DD 56 F1      [19]  738 	ld	d, -15 (ix)
   040A C5            [11]  739 	push	bc
   040B 21 1D 00      [10]  740 	ld	hl, #0x001d
   040E E5            [11]  741 	push	hl
   040F 3E FF         [ 7]  742 	ld	a, #0xff
   0411 F5            [11]  743 	push	af
   0412 33            [ 6]  744 	inc	sp
   0413 D5            [11]  745 	push	de
   0414 CDr17r00      [17]  746 	call	_write_string
   0417 21 07 00      [10]  747 	ld	hl, #7
   041A 39            [11]  748 	add	hl, sp
   041B F9            [ 6]  749 	ld	sp, hl
                            750 ;boot_rom.c:130: m <<= 1;
   041C DD 7E F2      [19]  751 	ld	a, -14 (ix)
   041F 87            [ 4]  752 	add	a, a
   0420 DD 77 F2      [19]  753 	ld	-14 (ix), a
                            754 ;boot_rom.c:122: for (char j = 0; j < 6; j++)
   0423 DD 34 FE      [23]  755 	inc	-2 (ix)
   0426 C3r7Fr03      [10]  756 	jp	00121$
   0429                     757 00106$:
                            758 ;boot_rom.c:133: hsync_last = hsync;
   0429 3Ar02r00      [13]  759 	ld	a,(#_hsync + 0)
   042C 32r03r00      [13]  760 	ld	(#_hsync_last + 0),a
                            761 ;boot_rom.c:134: vsync_last = vsync;
   042F 3Ar04r00      [13]  762 	ld	a,(#_vsync + 0)
   0432 32r05r00      [13]  763 	ld	(#_vsync_last + 0),a
                            764 ;boot_rom.c:136: }
   0435 C3r70r02      [10]  765 	jp	00109$
   0438                     766 ___str_3:
   0438 2D 2D 2D 20 4D 69   767 	.ascii "--- MiSTer Input Tester ---"
        53 54 65 72 20 49
        6E 70 75 74 20 54
        65 73 74 65 72 20
        2D 2D 2D
   0453 00                  768 	.db 0x00
   0454                     769 ___str_4:
   0454 25 64               770 	.ascii "%d"
   0456 00                  771 	.db 0x00
                            772 	.area _CODE
                            773 	.area _INITIALIZER
   0000                     774 __xinit__asc_0:
   0000 30                  775 	.db #0x30	; 48	'0'
   0001                     776 __xinit__asc_1:
   0001 31                  777 	.db #0x31	; 49	'1'
                            778 	.area _CABS (ABS)
