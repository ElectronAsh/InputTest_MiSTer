                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.8.0 #10562 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module boot_rom
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _page_inputs
                             13 	.globl _page_border
                             14 	.globl _write_char
                             15 	.globl _write_string
                             16 	.globl _clear_chars
                             17 	.globl _strlen
                             18 	.globl _sprintf
                             19 	.globl _asc_1
                             20 	.globl _asc_0
                             21 	.globl _vsync_last
                             22 	.globl _vsync
                             23 	.globl _hsync_last
                             24 	.globl _hsync
                             25 	.globl _chram_size
                             26 	.globl _colram
                             27 	.globl _chram
                             28 	.globl _spinner
                             29 	.globl _paddle
                             30 	.globl _analog
                             31 	.globl _joystick
                             32 	.globl _input0
                             33 	.globl _chram_rows
                             34 	.globl _chram_cols
                             35 ;--------------------------------------------------------
                             36 ; special function registers
                             37 ;--------------------------------------------------------
                             38 ;--------------------------------------------------------
                             39 ; ram data
                             40 ;--------------------------------------------------------
                             41 	.area _DATA
                     6000    42 _input0	=	0x6000
                     7000    43 _joystick	=	0x7000
                     7100    44 _analog	=	0x7100
                     7200    45 _paddle	=	0x7200
                     7300    46 _spinner	=	0x7300
                     8000    47 _chram	=	0x8000
                     8800    48 _colram	=	0x8800
   0000                      49 _chram_size::
   0000                      50 	.ds 2
   0002                      51 _hsync::
   0002                      52 	.ds 1
   0003                      53 _hsync_last::
   0003                      54 	.ds 1
   0004                      55 _vsync::
   0004                      56 	.ds 1
   0005                      57 _vsync_last::
   0005                      58 	.ds 1
                             59 ;--------------------------------------------------------
                             60 ; ram data
                             61 ;--------------------------------------------------------
                             62 	.area _INITIALIZED
   0000                      63 _asc_0::
   0000                      64 	.ds 1
   0001                      65 _asc_1::
   0001                      66 	.ds 1
                             67 ;--------------------------------------------------------
                             68 ; absolute external ram data
                             69 ;--------------------------------------------------------
                             70 	.area _DABS (ABS)
                             71 ;--------------------------------------------------------
                             72 ; global & static initialisations
                             73 ;--------------------------------------------------------
                             74 	.area _HOME
                             75 	.area _GSINIT
                             76 	.area _GSFINAL
                             77 	.area _GSINIT
                             78 ;--------------------------------------------------------
                             79 ; Home
                             80 ;--------------------------------------------------------
                             81 	.area _HOME
                             82 	.area _HOME
                             83 ;--------------------------------------------------------
                             84 ; code
                             85 ;--------------------------------------------------------
                             86 	.area _CODE
                             87 ;boot_rom.c:24: void clear_chars()
                             88 ;	---------------------------------
                             89 ; Function clear_chars
                             90 ; ---------------------------------
   0000                      91 _clear_chars::
                             92 ;boot_rom.c:26: for (unsigned int p = 0; p < chram_size; p++)
   0000 01 00 00      [10]   93 	ld	bc, #0x0000
   0003                      94 00103$:
   0003 21r00r00      [10]   95 	ld	hl, #_chram_size
   0006 79            [ 4]   96 	ld	a, c
   0007 96            [ 7]   97 	sub	a, (hl)
   0008 78            [ 4]   98 	ld	a, b
   0009 23            [ 6]   99 	inc	hl
   000A 9E            [ 7]  100 	sbc	a, (hl)
   000B D0            [11]  101 	ret	NC
                            102 ;boot_rom.c:28: chram[p] = 0;
   000C 21 00 80      [10]  103 	ld	hl, #_chram+0
   000F 09            [11]  104 	add	hl, bc
   0010 36 00         [10]  105 	ld	(hl), #0x00
                            106 ;boot_rom.c:26: for (unsigned int p = 0; p < chram_size; p++)
   0012 03            [ 6]  107 	inc	bc
                            108 ;boot_rom.c:30: }
   0013 18 EE         [12]  109 	jr	00103$
   0015                     110 _chram_cols:
   0015 40                  111 	.db #0x40	; 64
   0016                     112 _chram_rows:
   0016 20                  113 	.db #0x20	; 32
                            114 ;boot_rom.c:32: void write_string(const char *string, char color, unsigned int x, unsigned int y)
                            115 ;	---------------------------------
                            116 ; Function write_string
                            117 ; ---------------------------------
   0017                     118 _write_string::
   0017 DD E5         [15]  119 	push	ix
   0019 DD 21 00 00   [14]  120 	ld	ix,#0
   001D DD 39         [15]  121 	add	ix,sp
   001F F5            [11]  122 	push	af
                            123 ;boot_rom.c:34: unsigned int p = (y * chram_cols) + x;
   0020 21r15r00      [10]  124 	ld	hl,#_chram_cols + 0
   0023 4E            [ 7]  125 	ld	c, (hl)
   0024 06 00         [ 7]  126 	ld	b, #0x00
   0026 C5            [11]  127 	push	bc
   0027 DD 6E 09      [19]  128 	ld	l, 9 (ix)
   002A DD 66 0A      [19]  129 	ld	h, 10 (ix)
   002D E5            [11]  130 	push	hl
   002E CDr00r00      [17]  131 	call	__mulint
   0031 F1            [10]  132 	pop	af
   0032 F1            [10]  133 	pop	af
   0033 4D            [ 4]  134 	ld	c, l
   0034 44            [ 4]  135 	ld	b, h
   0035 DD 6E 07      [19]  136 	ld	l, 7 (ix)
   0038 DD 66 08      [19]  137 	ld	h, 8 (ix)
   003B 09            [11]  138 	add	hl, bc
   003C EB            [ 4]  139 	ex	de,hl
                            140 ;boot_rom.c:35: unsigned char l = strlen(string);
   003D DD 6E 04      [19]  141 	ld	l, 4 (ix)
   0040 DD 66 05      [19]  142 	ld	h, 5 (ix)
   0043 E5            [11]  143 	push	hl
   0044 CDr00r00      [17]  144 	call	_strlen
   0047 F1            [10]  145 	pop	af
   0048 4D            [ 4]  146 	ld	c, l
                            147 ;boot_rom.c:36: for (char c = 0; c < l; c++)
   0049 06 00         [ 7]  148 	ld	b, #0x00
   004B                     149 00103$:
   004B 78            [ 4]  150 	ld	a, b
   004C 91            [ 4]  151 	sub	a, c
   004D 30 20         [12]  152 	jr	NC,00105$
                            153 ;boot_rom.c:38: chram[p] = string[c];
   004F 21 00 80      [10]  154 	ld	hl, #_chram
   0052 19            [11]  155 	add	hl, de
   0053 E3            [19]  156 	ex	(sp), hl
   0054 DD 7E 04      [19]  157 	ld	a, 4 (ix)
   0057 80            [ 4]  158 	add	a, b
   0058 6F            [ 4]  159 	ld	l, a
   0059 DD 7E 05      [19]  160 	ld	a, 5 (ix)
   005C CE 00         [ 7]  161 	adc	a, #0x00
   005E 67            [ 4]  162 	ld	h, a
   005F 7E            [ 7]  163 	ld	a, (hl)
   0060 E1            [10]  164 	pop	hl
   0061 E5            [11]  165 	push	hl
   0062 77            [ 7]  166 	ld	(hl), a
                            167 ;boot_rom.c:39: colram[p] = color;
   0063 21 00 88      [10]  168 	ld	hl, #_colram
   0066 19            [11]  169 	add	hl, de
   0067 DD 7E 06      [19]  170 	ld	a, 6 (ix)
   006A 77            [ 7]  171 	ld	(hl), a
                            172 ;boot_rom.c:40: p++;
   006B 13            [ 6]  173 	inc	de
                            174 ;boot_rom.c:36: for (char c = 0; c < l; c++)
   006C 04            [ 4]  175 	inc	b
   006D 18 DC         [12]  176 	jr	00103$
   006F                     177 00105$:
                            178 ;boot_rom.c:42: }
   006F DD F9         [10]  179 	ld	sp, ix
   0071 DD E1         [14]  180 	pop	ix
   0073 C9            [10]  181 	ret
                            182 ;boot_rom.c:44: void write_char(unsigned char c, char color, unsigned int x, unsigned int y)
                            183 ;	---------------------------------
                            184 ; Function write_char
                            185 ; ---------------------------------
   0074                     186 _write_char::
   0074 DD E5         [15]  187 	push	ix
   0076 DD 21 00 00   [14]  188 	ld	ix,#0
   007A DD 39         [15]  189 	add	ix,sp
                            190 ;boot_rom.c:46: unsigned int p = (y * chram_cols) + x;
   007C 21r15r00      [10]  191 	ld	hl,#_chram_cols + 0
   007F 4E            [ 7]  192 	ld	c, (hl)
   0080 06 00         [ 7]  193 	ld	b, #0x00
   0082 C5            [11]  194 	push	bc
   0083 DD 6E 08      [19]  195 	ld	l, 8 (ix)
   0086 DD 66 09      [19]  196 	ld	h, 9 (ix)
   0089 E5            [11]  197 	push	hl
   008A CDr00r00      [17]  198 	call	__mulint
   008D F1            [10]  199 	pop	af
   008E F1            [10]  200 	pop	af
   008F 4D            [ 4]  201 	ld	c, l
   0090 44            [ 4]  202 	ld	b, h
   0091 DD 6E 06      [19]  203 	ld	l, 6 (ix)
   0094 DD 66 07      [19]  204 	ld	h, 7 (ix)
   0097 09            [11]  205 	add	hl, bc
   0098 4D            [ 4]  206 	ld	c, l
   0099 44            [ 4]  207 	ld	b, h
                            208 ;boot_rom.c:47: chram[p] = c;
   009A 21 00 80      [10]  209 	ld	hl, #_chram+0
   009D 09            [11]  210 	add	hl, bc
   009E DD 7E 04      [19]  211 	ld	a, 4 (ix)
   00A1 77            [ 7]  212 	ld	(hl), a
                            213 ;boot_rom.c:48: colram[p] = color;
   00A2 21 00 88      [10]  214 	ld	hl, #_colram+0
   00A5 09            [11]  215 	add	hl, bc
   00A6 DD 7E 05      [19]  216 	ld	a, 5 (ix)
   00A9 77            [ 7]  217 	ld	(hl), a
                            218 ;boot_rom.c:49: }
   00AA DD E1         [14]  219 	pop	ix
   00AC C9            [10]  220 	ret
                            221 ;boot_rom.c:51: void page_border(char color)
                            222 ;	---------------------------------
                            223 ; Function page_border
                            224 ; ---------------------------------
   00AD                     225 _page_border::
   00AD DD E5         [15]  226 	push	ix
   00AF DD 21 00 00   [14]  227 	ld	ix,#0
   00B3 DD 39         [15]  228 	add	ix,sp
                            229 ;boot_rom.c:53: write_char(128, color, 0, 0);
   00B5 21 00 00      [10]  230 	ld	hl, #0x0000
   00B8 E5            [11]  231 	push	hl
   00B9 2E 00         [ 7]  232 	ld	l, #0x00
   00BB E5            [11]  233 	push	hl
   00BC DD 56 04      [19]  234 	ld	d, 4 (ix)
   00BF 1E 80         [ 7]  235 	ld	e,#0x80
   00C1 D5            [11]  236 	push	de
   00C2 CDr74r00      [17]  237 	call	_write_char
   00C5 21 06 00      [10]  238 	ld	hl, #6
   00C8 39            [11]  239 	add	hl, sp
   00C9 F9            [ 6]  240 	ld	sp, hl
                            241 ;boot_rom.c:54: write_char(130, color, 39, 0);
   00CA 21 00 00      [10]  242 	ld	hl, #0x0000
   00CD E5            [11]  243 	push	hl
   00CE 2E 27         [ 7]  244 	ld	l, #0x27
   00D0 E5            [11]  245 	push	hl
   00D1 DD 56 04      [19]  246 	ld	d, 4 (ix)
   00D4 1E 82         [ 7]  247 	ld	e,#0x82
   00D6 D5            [11]  248 	push	de
   00D7 CDr74r00      [17]  249 	call	_write_char
   00DA 21 06 00      [10]  250 	ld	hl, #6
   00DD 39            [11]  251 	add	hl, sp
   00DE F9            [ 6]  252 	ld	sp, hl
                            253 ;boot_rom.c:55: write_char(133, color, 0, 29);
   00DF 21 1D 00      [10]  254 	ld	hl, #0x001d
   00E2 E5            [11]  255 	push	hl
   00E3 2E 00         [ 7]  256 	ld	l, #0x00
   00E5 E5            [11]  257 	push	hl
   00E6 DD 56 04      [19]  258 	ld	d, 4 (ix)
   00E9 1E 85         [ 7]  259 	ld	e,#0x85
   00EB D5            [11]  260 	push	de
   00EC CDr74r00      [17]  261 	call	_write_char
   00EF 21 06 00      [10]  262 	ld	hl, #6
   00F2 39            [11]  263 	add	hl, sp
   00F3 F9            [ 6]  264 	ld	sp, hl
                            265 ;boot_rom.c:56: write_char(132, color, 39, 29);
   00F4 21 1D 00      [10]  266 	ld	hl, #0x001d
   00F7 E5            [11]  267 	push	hl
   00F8 2E 27         [ 7]  268 	ld	l, #0x27
   00FA E5            [11]  269 	push	hl
   00FB DD 56 04      [19]  270 	ld	d, 4 (ix)
   00FE 1E 84         [ 7]  271 	ld	e,#0x84
   0100 D5            [11]  272 	push	de
   0101 CDr74r00      [17]  273 	call	_write_char
   0104 21 06 00      [10]  274 	ld	hl, #6
   0107 39            [11]  275 	add	hl, sp
   0108 F9            [ 6]  276 	ld	sp, hl
                            277 ;boot_rom.c:57: for (char x = 1; x < 39; x++)
   0109 0E 01         [ 7]  278 	ld	c, #0x01
   010B                     279 00104$:
   010B 79            [ 4]  280 	ld	a, c
   010C D6 27         [ 7]  281 	sub	a, #0x27
   010E 30 30         [12]  282 	jr	NC,00101$
                            283 ;boot_rom.c:59: write_char(129, color, x, 0);
   0110 59            [ 4]  284 	ld	e, c
   0111 16 00         [ 7]  285 	ld	d, #0x00
   0113 C5            [11]  286 	push	bc
   0114 D5            [11]  287 	push	de
   0115 21 00 00      [10]  288 	ld	hl, #0x0000
   0118 E5            [11]  289 	push	hl
   0119 D5            [11]  290 	push	de
   011A DD 56 04      [19]  291 	ld	d, 4 (ix)
   011D 1E 81         [ 7]  292 	ld	e,#0x81
   011F D5            [11]  293 	push	de
   0120 CDr74r00      [17]  294 	call	_write_char
   0123 21 06 00      [10]  295 	ld	hl, #6
   0126 39            [11]  296 	add	hl, sp
   0127 F9            [ 6]  297 	ld	sp, hl
   0128 D1            [10]  298 	pop	de
   0129 21 1D 00      [10]  299 	ld	hl, #0x001d
   012C E5            [11]  300 	push	hl
   012D D5            [11]  301 	push	de
   012E DD 56 04      [19]  302 	ld	d, 4 (ix)
   0131 1E 81         [ 7]  303 	ld	e,#0x81
   0133 D5            [11]  304 	push	de
   0134 CDr74r00      [17]  305 	call	_write_char
   0137 21 06 00      [10]  306 	ld	hl, #6
   013A 39            [11]  307 	add	hl, sp
   013B F9            [ 6]  308 	ld	sp, hl
   013C C1            [10]  309 	pop	bc
                            310 ;boot_rom.c:57: for (char x = 1; x < 39; x++)
   013D 0C            [ 4]  311 	inc	c
   013E 18 CB         [12]  312 	jr	00104$
   0140                     313 00101$:
                            314 ;boot_rom.c:62: for (char y = 1; y < 29; y++)
   0140 0E 01         [ 7]  315 	ld	c, #0x01
   0142                     316 00107$:
   0142 79            [ 4]  317 	ld	a, c
   0143 D6 1D         [ 7]  318 	sub	a, #0x1d
   0145 30 2E         [12]  319 	jr	NC,00109$
                            320 ;boot_rom.c:64: write_char(131, color, 0, y);
   0147 59            [ 4]  321 	ld	e, c
   0148 16 00         [ 7]  322 	ld	d, #0x00
   014A C5            [11]  323 	push	bc
   014B D5            [11]  324 	push	de
   014C D5            [11]  325 	push	de
   014D 21 00 00      [10]  326 	ld	hl, #0x0000
   0150 E5            [11]  327 	push	hl
   0151 DD 56 04      [19]  328 	ld	d, 4 (ix)
   0154 1E 83         [ 7]  329 	ld	e,#0x83
   0156 D5            [11]  330 	push	de
   0157 CDr74r00      [17]  331 	call	_write_char
   015A 21 06 00      [10]  332 	ld	hl, #6
   015D 39            [11]  333 	add	hl, sp
   015E F9            [ 6]  334 	ld	sp, hl
   015F 21 27 00      [10]  335 	ld	hl, #0x0027
   0162 E5            [11]  336 	push	hl
   0163 DD 56 04      [19]  337 	ld	d, 4 (ix)
   0166 1E 83         [ 7]  338 	ld	e,#0x83
   0168 D5            [11]  339 	push	de
   0169 CDr74r00      [17]  340 	call	_write_char
   016C 21 06 00      [10]  341 	ld	hl, #6
   016F 39            [11]  342 	add	hl, sp
   0170 F9            [ 6]  343 	ld	sp, hl
   0171 C1            [10]  344 	pop	bc
                            345 ;boot_rom.c:62: for (char y = 1; y < 29; y++)
   0172 0C            [ 4]  346 	inc	c
   0173 18 CD         [12]  347 	jr	00107$
   0175                     348 00109$:
                            349 ;boot_rom.c:67: }
   0175 DD E1         [14]  350 	pop	ix
   0177 C9            [10]  351 	ret
                            352 ;boot_rom.c:69: void page_inputs()
                            353 ;	---------------------------------
                            354 ; Function page_inputs
                            355 ; ---------------------------------
   0178                     356 _page_inputs::
   0178 DD E5         [15]  357 	push	ix
   017A DD 21 00 00   [14]  358 	ld	ix,#0
   017E DD 39         [15]  359 	add	ix,sp
   0180 21 EB FF      [10]  360 	ld	hl, #-21
   0183 39            [11]  361 	add	hl, sp
   0184 F9            [ 6]  362 	ld	sp, hl
                            363 ;boot_rom.c:71: clear_chars();
   0185 CDr00r00      [17]  364 	call	_clear_chars
                            365 ;boot_rom.c:72: page_border(0b00000111);
   0188 3E 07         [ 7]  366 	ld	a, #0x07
   018A F5            [11]  367 	push	af
   018B 33            [ 6]  368 	inc	sp
   018C CDrADr00      [17]  369 	call	_page_border
   018F 33            [ 6]  370 	inc	sp
                            371 ;boot_rom.c:73: write_string("UDLRABCXYZLRSs", 0xFF, 7, 3);
   0190 21 03 00      [10]  372 	ld	hl, #0x0003
   0193 E5            [11]  373 	push	hl
   0194 2E 07         [ 7]  374 	ld	l, #0x07
   0196 E5            [11]  375 	push	hl
   0197 3E FF         [ 7]  376 	ld	a, #0xff
   0199 F5            [11]  377 	push	af
   019A 33            [ 6]  378 	inc	sp
   019B 21rF9r02      [10]  379 	ld	hl, #___str_0
   019E E5            [11]  380 	push	hl
   019F CDr17r00      [17]  381 	call	_write_string
   01A2 21 07 00      [10]  382 	ld	hl, #7
   01A5 39            [11]  383 	add	hl, sp
   01A6 F9            [ 6]  384 	ld	sp, hl
                            385 ;boot_rom.c:74: write_string("AX", 0xFF, 26, 3);
   01A7 21 03 00      [10]  386 	ld	hl, #0x0003
   01AA E5            [11]  387 	push	hl
   01AB 2E 1A         [ 7]  388 	ld	l, #0x1a
   01AD E5            [11]  389 	push	hl
   01AE 3E FF         [ 7]  390 	ld	a, #0xff
   01B0 F5            [11]  391 	push	af
   01B1 33            [ 6]  392 	inc	sp
   01B2 21r08r03      [10]  393 	ld	hl, #___str_1
   01B5 E5            [11]  394 	push	hl
   01B6 CDr17r00      [17]  395 	call	_write_string
   01B9 21 07 00      [10]  396 	ld	hl, #7
   01BC 39            [11]  397 	add	hl, sp
   01BD F9            [ 6]  398 	ld	sp, hl
                            399 ;boot_rom.c:75: write_string("AY", 0xFF, 31, 3);
   01BE 21 03 00      [10]  400 	ld	hl, #0x0003
   01C1 E5            [11]  401 	push	hl
   01C2 2E 1F         [ 7]  402 	ld	l, #0x1f
   01C4 E5            [11]  403 	push	hl
   01C5 3E FF         [ 7]  404 	ld	a, #0xff
   01C7 F5            [11]  405 	push	af
   01C8 33            [ 6]  406 	inc	sp
   01C9 21r0Br03      [10]  407 	ld	hl, #___str_2
   01CC E5            [11]  408 	push	hl
   01CD CDr17r00      [17]  409 	call	_write_string
   01D0 21 07 00      [10]  410 	ld	hl, #7
   01D3 39            [11]  411 	add	hl, sp
   01D4 F9            [ 6]  412 	ld	sp, hl
                            413 ;boot_rom.c:78: for (unsigned char j = 0; j < 6; j++)
   01D5 21 00 00      [10]  414 	ld	hl, #0x0000
   01D8 39            [11]  415 	add	hl, sp
   01D9 EB            [ 4]  416 	ex	de, hl
   01DA DD 73 FA      [19]  417 	ld	-6 (ix), e
   01DD DD 72 FB      [19]  418 	ld	-5 (ix), d
   01E0 DD 73 FC      [19]  419 	ld	-4 (ix), e
   01E3 DD 72 FD      [19]  420 	ld	-3 (ix), d
   01E6 DD 73 F4      [19]  421 	ld	-12 (ix), e
   01E9 DD 72 F5      [19]  422 	ld	-11 (ix), d
   01EC DD 73 F2      [19]  423 	ld	-14 (ix), e
   01EF DD 72 F3      [19]  424 	ld	-13 (ix), d
   01F2 DD 73 F0      [19]  425 	ld	-16 (ix), e
   01F5 DD 72 F1      [19]  426 	ld	-15 (ix), d
   01F8 DD 36 FF 00   [19]  427 	ld	-1 (ix), #0x00
   01FC                     428 00103$:
   01FC DD 7E FF      [19]  429 	ld	a, -1 (ix)
   01FF D6 06         [ 7]  430 	sub	a, #0x06
   0201 D2rF4r02      [10]  431 	jp	NC, 00105$
                            432 ;boot_rom.c:80: sprintf(label, "JOY%d", j + 1);
   0204 DD 7E FF      [19]  433 	ld	a, -1 (ix)
   0207 DD 77 F8      [19]  434 	ld	-8 (ix), a
   020A DD 36 F9 00   [19]  435 	ld	-7 (ix), #0x00
   020E DD 7E F8      [19]  436 	ld	a, -8 (ix)
   0211 C6 01         [ 7]  437 	add	a, #0x01
   0213 DD 77 F6      [19]  438 	ld	-10 (ix), a
   0216 DD 7E F9      [19]  439 	ld	a, -7 (ix)
   0219 CE 00         [ 7]  440 	adc	a, #0x00
   021B DD 77 F7      [19]  441 	ld	-9 (ix), a
   021E 4B            [ 4]  442 	ld	c, e
   021F 42            [ 4]  443 	ld	b, d
   0220 D5            [11]  444 	push	de
   0221 DD 6E F6      [19]  445 	ld	l, -10 (ix)
   0224 DD 66 F7      [19]  446 	ld	h, -9 (ix)
   0227 E5            [11]  447 	push	hl
   0228 21r0Er03      [10]  448 	ld	hl, #___str_3
   022B E5            [11]  449 	push	hl
   022C C5            [11]  450 	push	bc
   022D CDr00r00      [17]  451 	call	_sprintf
   0230 21 06 00      [10]  452 	ld	hl, #6
   0233 39            [11]  453 	add	hl, sp
   0234 F9            [ 6]  454 	ld	sp, hl
   0235 D1            [10]  455 	pop	de
                            456 ;boot_rom.c:81: write_string(label, 0xFF - (j * 2), 2, 4 + j);
   0236 DD 7E F8      [19]  457 	ld	a, -8 (ix)
   0239 C6 04         [ 7]  458 	add	a, #0x04
   023B 6F            [ 4]  459 	ld	l, a
   023C DD 7E F9      [19]  460 	ld	a, -7 (ix)
   023F CE 00         [ 7]  461 	adc	a, #0x00
   0241 67            [ 4]  462 	ld	h, a
   0242 DD 7E FF      [19]  463 	ld	a, -1 (ix)
   0245 87            [ 4]  464 	add	a, a
   0246 4F            [ 4]  465 	ld	c, a
   0247 3E FF         [ 7]  466 	ld	a, #0xff
   0249 91            [ 4]  467 	sub	a, c
   024A DD 77 FE      [19]  468 	ld	-2 (ix), a
   024D DD 4E FA      [19]  469 	ld	c, -6 (ix)
   0250 DD 46 FB      [19]  470 	ld	b, -5 (ix)
   0253 D5            [11]  471 	push	de
   0254 E5            [11]  472 	push	hl
   0255 21 02 00      [10]  473 	ld	hl, #0x0002
   0258 E5            [11]  474 	push	hl
   0259 DD 7E FE      [19]  475 	ld	a, -2 (ix)
   025C F5            [11]  476 	push	af
   025D 33            [ 6]  477 	inc	sp
   025E C5            [11]  478 	push	bc
   025F CDr17r00      [17]  479 	call	_write_string
   0262 21 07 00      [10]  480 	ld	hl, #7
   0265 39            [11]  481 	add	hl, sp
   0266 F9            [ 6]  482 	ld	sp, hl
   0267 D1            [10]  483 	pop	de
                            484 ;boot_rom.c:83: sprintf(label, "PAD%d", j + 1);
   0268 DD 4E FC      [19]  485 	ld	c, -4 (ix)
   026B DD 46 FD      [19]  486 	ld	b, -3 (ix)
   026E D5            [11]  487 	push	de
   026F DD 6E F6      [19]  488 	ld	l, -10 (ix)
   0272 DD 66 F7      [19]  489 	ld	h, -9 (ix)
   0275 E5            [11]  490 	push	hl
   0276 21r14r03      [10]  491 	ld	hl, #___str_4
   0279 E5            [11]  492 	push	hl
   027A C5            [11]  493 	push	bc
   027B CDr00r00      [17]  494 	call	_sprintf
   027E 21 06 00      [10]  495 	ld	hl, #6
   0281 39            [11]  496 	add	hl, sp
   0282 F9            [ 6]  497 	ld	sp, hl
   0283 D1            [10]  498 	pop	de
                            499 ;boot_rom.c:84: write_string(label, 0xFF - (j * 2), 2, 11 + j);
   0284 DD 7E F8      [19]  500 	ld	a, -8 (ix)
   0287 C6 0B         [ 7]  501 	add	a, #0x0b
   0289 6F            [ 4]  502 	ld	l, a
   028A DD 7E F9      [19]  503 	ld	a, -7 (ix)
   028D CE 00         [ 7]  504 	adc	a, #0x00
   028F 67            [ 4]  505 	ld	h, a
   0290 DD 4E F4      [19]  506 	ld	c, -12 (ix)
   0293 DD 46 F5      [19]  507 	ld	b, -11 (ix)
   0296 D5            [11]  508 	push	de
   0297 E5            [11]  509 	push	hl
   0298 21 02 00      [10]  510 	ld	hl, #0x0002
   029B E5            [11]  511 	push	hl
   029C DD 7E FE      [19]  512 	ld	a, -2 (ix)
   029F F5            [11]  513 	push	af
   02A0 33            [ 6]  514 	inc	sp
   02A1 C5            [11]  515 	push	bc
   02A2 CDr17r00      [17]  516 	call	_write_string
   02A5 21 07 00      [10]  517 	ld	hl, #7
   02A8 39            [11]  518 	add	hl, sp
   02A9 F9            [ 6]  519 	ld	sp, hl
   02AA D1            [10]  520 	pop	de
                            521 ;boot_rom.c:86: sprintf(label, "SPN%d", j + 1);
   02AB DD 4E F2      [19]  522 	ld	c, -14 (ix)
   02AE DD 46 F3      [19]  523 	ld	b, -13 (ix)
   02B1 D5            [11]  524 	push	de
   02B2 DD 6E F6      [19]  525 	ld	l, -10 (ix)
   02B5 DD 66 F7      [19]  526 	ld	h, -9 (ix)
   02B8 E5            [11]  527 	push	hl
   02B9 21r1Ar03      [10]  528 	ld	hl, #___str_5
   02BC E5            [11]  529 	push	hl
   02BD C5            [11]  530 	push	bc
   02BE CDr00r00      [17]  531 	call	_sprintf
   02C1 21 06 00      [10]  532 	ld	hl, #6
   02C4 39            [11]  533 	add	hl, sp
   02C5 F9            [ 6]  534 	ld	sp, hl
   02C6 D1            [10]  535 	pop	de
                            536 ;boot_rom.c:87: write_string(label, 0xFF - (j * 2), 2, 18 + j);
   02C7 DD 7E F8      [19]  537 	ld	a, -8 (ix)
   02CA C6 12         [ 7]  538 	add	a, #0x12
   02CC 6F            [ 4]  539 	ld	l, a
   02CD DD 7E F9      [19]  540 	ld	a, -7 (ix)
   02D0 CE 00         [ 7]  541 	adc	a, #0x00
   02D2 67            [ 4]  542 	ld	h, a
   02D3 DD 4E F0      [19]  543 	ld	c, -16 (ix)
   02D6 DD 46 F1      [19]  544 	ld	b, -15 (ix)
   02D9 D5            [11]  545 	push	de
   02DA E5            [11]  546 	push	hl
   02DB 21 02 00      [10]  547 	ld	hl, #0x0002
   02DE E5            [11]  548 	push	hl
   02DF DD 7E FE      [19]  549 	ld	a, -2 (ix)
   02E2 F5            [11]  550 	push	af
   02E3 33            [ 6]  551 	inc	sp
   02E4 C5            [11]  552 	push	bc
   02E5 CDr17r00      [17]  553 	call	_write_string
   02E8 21 07 00      [10]  554 	ld	hl, #7
   02EB 39            [11]  555 	add	hl, sp
   02EC F9            [ 6]  556 	ld	sp, hl
   02ED D1            [10]  557 	pop	de
                            558 ;boot_rom.c:78: for (unsigned char j = 0; j < 6; j++)
   02EE DD 34 FF      [23]  559 	inc	-1 (ix)
   02F1 C3rFCr01      [10]  560 	jp	00103$
   02F4                     561 00105$:
                            562 ;boot_rom.c:89: }
   02F4 DD F9         [10]  563 	ld	sp, ix
   02F6 DD E1         [14]  564 	pop	ix
   02F8 C9            [10]  565 	ret
   02F9                     566 ___str_0:
   02F9 55 44 4C 52 41 42   567 	.ascii "UDLRABCXYZLRSs"
        43 58 59 5A 4C 52
        53 73
   0307 00                  568 	.db 0x00
   0308                     569 ___str_1:
   0308 41 58               570 	.ascii "AX"
   030A 00                  571 	.db 0x00
   030B                     572 ___str_2:
   030B 41 59               573 	.ascii "AY"
   030D 00                  574 	.db 0x00
   030E                     575 ___str_3:
   030E 4A 4F 59 25 64      576 	.ascii "JOY%d"
   0313 00                  577 	.db 0x00
   0314                     578 ___str_4:
   0314 50 41 44 25 64      579 	.ascii "PAD%d"
   0319 00                  580 	.db 0x00
   031A                     581 ___str_5:
   031A 53 50 4E 25 64      582 	.ascii "SPN%d"
   031F 00                  583 	.db 0x00
                            584 ;boot_rom.c:94: void main()
                            585 ;	---------------------------------
                            586 ; Function main
                            587 ; ---------------------------------
   0320                     588 _main::
   0320 DD E5         [15]  589 	push	ix
   0322 DD 21 00 00   [14]  590 	ld	ix,#0
   0326 DD 39         [15]  591 	add	ix,sp
   0328 21 E5 FF      [10]  592 	ld	hl, #-27
   032B 39            [11]  593 	add	hl, sp
   032C F9            [ 6]  594 	ld	sp, hl
                            595 ;boot_rom.c:96: chram_size = chram_cols * chram_rows;
   032D 21r16r00      [10]  596 	ld	hl,#_chram_rows + 0
   0330 5E            [ 7]  597 	ld	e, (hl)
   0331 21r15r00      [10]  598 	ld	hl,#_chram_cols + 0
   0334 66            [ 7]  599 	ld	h, (hl)
   0335 2E 00         [ 7]  600 	ld	l, #0x00
   0337 55            [ 4]  601 	ld	d, l
   0338 06 08         [ 7]  602 	ld	b, #0x08
   033A                     603 00212$:
   033A 29            [11]  604 	add	hl, hl
   033B 30 01         [12]  605 	jr	NC,00213$
   033D 19            [11]  606 	add	hl, de
   033E                     607 00213$:
   033E 10 FA         [13]  608 	djnz	00212$
   0340 22r00r00      [16]  609 	ld	(_chram_size), hl
                            610 ;boot_rom.c:98: page_inputs();
   0343 CDr78r01      [17]  611 	call	_page_inputs
                            612 ;boot_rom.c:100: while (1)
   0346 0E AB         [ 7]  613 	ld	c, #0xab
   0348                     614 00111$:
                            615 ;boot_rom.c:102: hsync = input0 & 0x80;
   0348 3A 00 60      [13]  616 	ld	a,(#_input0 + 0)
   034B E6 80         [ 7]  617 	and	a, #0x80
   034D 32r02r00      [13]  618 	ld	(#_hsync + 0),a
                            619 ;boot_rom.c:103: vsync = input0 & 0x40;
   0350 3A 00 60      [13]  620 	ld	a,(#_input0 + 0)
   0353 E6 40         [ 7]  621 	and	a, #0x40
   0355 FD 21r04r00   [14]  622 	ld	iy, #_vsync
   0359 FD 77 00      [19]  623 	ld	0 (iy), a
                            624 ;boot_rom.c:110: if (vsync && !vsync_last)
   035C FD 7E 00      [19]  625 	ld	a, 0 (iy)
   035F B7            [ 4]  626 	or	a, a
   0360 CArC4r05      [10]  627 	jp	Z, 00108$
   0363 3Ar05r00      [13]  628 	ld	a,(#_vsync_last + 0)
   0366 B7            [ 4]  629 	or	a, a
   0367 C2rC4r05      [10]  630 	jp	NZ, 00108$
                            631 ;boot_rom.c:112: color++;
   036A 0C            [ 4]  632 	inc	c
                            633 ;boot_rom.c:113: write_string("--- MiSTer Input Tester ---", color, 6, 1);
   036B C5            [11]  634 	push	bc
   036C 21 01 00      [10]  635 	ld	hl, #0x0001
   036F E5            [11]  636 	push	hl
   0370 2E 06         [ 7]  637 	ld	l, #0x06
   0372 E5            [11]  638 	push	hl
   0373 79            [ 4]  639 	ld	a, c
   0374 F5            [11]  640 	push	af
   0375 33            [ 6]  641 	inc	sp
   0376 21rD3r05      [10]  642 	ld	hl, #___str_6
   0379 E5            [11]  643 	push	hl
   037A CDr17r00      [17]  644 	call	_write_string
   037D 21 07 00      [10]  645 	ld	hl, #7
   0380 39            [11]  646 	add	hl, sp
   0381 F9            [ 6]  647 	ld	sp, hl
   0382 C1            [10]  648 	pop	bc
                            649 ;boot_rom.c:115: for (char b = 0; b < 2; b++)
   0383 1E 00         [ 7]  650 	ld	e, #0x00
   0385                     651 00119$:
   0385 7B            [ 4]  652 	ld	a, e
   0386 D6 02         [ 7]  653 	sub	a, #0x02
   0388 D2r30r04      [10]  654 	jp	NC, 00103$
                            655 ;boot_rom.c:117: char m = 0b00000001;
   038B DD 36 FE 01   [19]  656 	ld	-2 (ix), #0x01
                            657 ;boot_rom.c:118: for (char i = 0; i < 8; i++)
   038F DD 36 FD 00   [19]  658 	ld	-3 (ix), #0x00
   0393                     659 00116$:
   0393 DD 7E FD      [19]  660 	ld	a, -3 (ix)
   0396 D6 08         [ 7]  661 	sub	a, #0x08
   0398 D2r2Cr04      [10]  662 	jp	NC, 00120$
                            663 ;boot_rom.c:120: char x = 7 + i + (b * 8);
   039B DD 7E FD      [19]  664 	ld	a, -3 (ix)
   039E C6 07         [ 7]  665 	add	a, #0x07
   03A0 47            [ 4]  666 	ld	b, a
   03A1 7B            [ 4]  667 	ld	a, e
   03A2 87            [ 4]  668 	add	a, a
   03A3 87            [ 4]  669 	add	a, a
   03A4 87            [ 4]  670 	add	a, a
   03A5 DD 77 F9      [19]  671 	ld	-7 (ix), a
   03A8 78            [ 4]  672 	ld	a, b
   03A9 DD 86 F9      [19]  673 	add	a, -7 (ix)
   03AC DD 77 FA      [19]  674 	ld	-6 (ix), a
                            675 ;boot_rom.c:121: for (j = 0; j < 6; j++)
   03AF DD 36 FF 00   [19]  676 	ld	-1 (ix), #0x00
   03B3                     677 00113$:
                            678 ;boot_rom.c:123: write_char((joystick[(b * 8) + (j * 32)] & m) ? asc_1 : asc_0, 0xFF, x, 4 + j);
   03B3 DD 7E FF      [19]  679 	ld	a, -1 (ix)
   03B6 16 00         [ 7]  680 	ld	d, #0x00
   03B8 C6 04         [ 7]  681 	add	a, #0x04
   03BA DD 77 F5      [19]  682 	ld	-11 (ix), a
   03BD 7A            [ 4]  683 	ld	a, d
   03BE CE 00         [ 7]  684 	adc	a, #0x00
   03C0 DD 77 F6      [19]  685 	ld	-10 (ix), a
   03C3 DD 7E FA      [19]  686 	ld	a, -6 (ix)
   03C6 DD 77 F7      [19]  687 	ld	-9 (ix), a
   03C9 DD 36 F8 00   [19]  688 	ld	-8 (ix), #0x00
   03CD DD 7E FF      [19]  689 	ld	a, -1 (ix)
   03D0 0F            [ 4]  690 	rrca
   03D1 0F            [ 4]  691 	rrca
   03D2 0F            [ 4]  692 	rrca
   03D3 E6 E0         [ 7]  693 	and	a, #0xe0
   03D5 DD 86 F9      [19]  694 	add	a, -7 (ix)
   03D8 47            [ 4]  695 	ld	b, a
   03D9 17            [ 4]  696 	rla
   03DA 9F            [ 4]  697 	sbc	a, a
   03DB 57            [ 4]  698 	ld	d, a
   03DC 3E 00         [ 7]  699 	ld	a, #<(_joystick)
   03DE 80            [ 4]  700 	add	a, b
   03DF 6F            [ 4]  701 	ld	l, a
   03E0 3E 70         [ 7]  702 	ld	a, #>(_joystick)
   03E2 8A            [ 4]  703 	adc	a, d
   03E3 67            [ 4]  704 	ld	h, a
   03E4 7E            [ 7]  705 	ld	a, (hl)
   03E5 DD A6 FE      [19]  706 	and	a, -2 (ix)
   03E8 B7            [ 4]  707 	or	a, a
   03E9 28 06         [12]  708 	jr	Z,00129$
   03EB 21r01r00      [10]  709 	ld	hl,#_asc_1 + 0
   03EE 46            [ 7]  710 	ld	b, (hl)
   03EF 18 04         [12]  711 	jr	00130$
   03F1                     712 00129$:
   03F1 21r00r00      [10]  713 	ld	hl,#_asc_0 + 0
   03F4 46            [ 7]  714 	ld	b, (hl)
   03F5                     715 00130$:
   03F5 C5            [11]  716 	push	bc
   03F6 D5            [11]  717 	push	de
   03F7 DD 6E F5      [19]  718 	ld	l, -11 (ix)
   03FA DD 66 F6      [19]  719 	ld	h, -10 (ix)
   03FD E5            [11]  720 	push	hl
   03FE DD 6E F7      [19]  721 	ld	l, -9 (ix)
   0401 DD 66 F8      [19]  722 	ld	h, -8 (ix)
   0404 E5            [11]  723 	push	hl
   0405 3E FF         [ 7]  724 	ld	a, #0xff
   0407 F5            [11]  725 	push	af
   0408 33            [ 6]  726 	inc	sp
   0409 C5            [11]  727 	push	bc
   040A 33            [ 6]  728 	inc	sp
   040B CDr74r00      [17]  729 	call	_write_char
   040E 21 06 00      [10]  730 	ld	hl, #6
   0411 39            [11]  731 	add	hl, sp
   0412 F9            [ 6]  732 	ld	sp, hl
   0413 D1            [10]  733 	pop	de
   0414 C1            [10]  734 	pop	bc
                            735 ;boot_rom.c:121: for (j = 0; j < 6; j++)
   0415 DD 34 FF      [23]  736 	inc	-1 (ix)
   0418 DD 7E FF      [19]  737 	ld	a, -1 (ix)
   041B D6 06         [ 7]  738 	sub	a, #0x06
   041D 38 94         [12]  739 	jr	C,00113$
                            740 ;boot_rom.c:125: m <<= 1;
   041F DD 7E FE      [19]  741 	ld	a, -2 (ix)
   0422 87            [ 4]  742 	add	a, a
   0423 DD 77 FE      [19]  743 	ld	-2 (ix), a
                            744 ;boot_rom.c:118: for (char i = 0; i < 8; i++)
   0426 DD 34 FD      [23]  745 	inc	-3 (ix)
   0429 C3r93r03      [10]  746 	jp	00116$
   042C                     747 00120$:
                            748 ;boot_rom.c:115: for (char b = 0; b < 2; b++)
   042C 1C            [ 4]  749 	inc	e
   042D C3r85r03      [10]  750 	jp	00119$
   0430                     751 00103$:
                            752 ;boot_rom.c:129: y = 4;
   0430 DD 36 FB 04   [19]  753 	ld	-5 (ix), #0x04
   0434 DD 36 FC 00   [19]  754 	ld	-4 (ix), #0x00
                            755 ;boot_rom.c:131: char m = 0b00000001;
   0438 06 01         [ 7]  756 	ld	b, #0x01
                            757 ;boot_rom.c:134: for (j = 0; j < 6; j++)
   043A 21 06 00      [10]  758 	ld	hl, #0x0006
   043D 39            [11]  759 	add	hl, sp
   043E DD 75 F7      [19]  760 	ld	-9 (ix), l
   0441 DD 74 F8      [19]  761 	ld	-8 (ix), h
   0444 DD 7E F7      [19]  762 	ld	a, -9 (ix)
   0447 DD 77 F5      [19]  763 	ld	-11 (ix), a
   044A DD 7E F8      [19]  764 	ld	a, -8 (ix)
   044D DD 77 F6      [19]  765 	ld	-10 (ix), a
   0450 DD 36 FF 00   [19]  766 	ld	-1 (ix), #0x00
   0454                     767 00121$:
                            768 ;boot_rom.c:136: signed char jx = analog[(j * 16)];
   0454 11 00 71      [10]  769 	ld	de, #_analog+0
   0457 DD 6E FF      [19]  770 	ld	l, -1 (ix)
   045A 26 00         [ 7]  771 	ld	h, #0x00
   045C 29            [11]  772 	add	hl, hl
   045D 29            [11]  773 	add	hl, hl
   045E 29            [11]  774 	add	hl, hl
   045F 29            [11]  775 	add	hl, hl
   0460 19            [11]  776 	add	hl, de
   0461 5E            [ 7]  777 	ld	e, (hl)
                            778 ;boot_rom.c:137: signed char jy = analog[(j * 16) + 8];
   0462 DD 7E FF      [19]  779 	ld	a, -1 (ix)
   0465 07            [ 4]  780 	rlca
   0466 07            [ 4]  781 	rlca
   0467 07            [ 4]  782 	rlca
   0468 07            [ 4]  783 	rlca
   0469 E6 F0         [ 7]  784 	and	a, #0xf0
   046B C6 08         [ 7]  785 	add	a, #0x08
   046D 6F            [ 4]  786 	ld	l, a
   046E 17            [ 4]  787 	rla
   046F 9F            [ 4]  788 	sbc	a, a
   0470 67            [ 4]  789 	ld	h, a
   0471 D5            [11]  790 	push	de
   0472 11 00 71      [10]  791 	ld	de, #_analog
   0475 19            [11]  792 	add	hl, de
   0476 D1            [10]  793 	pop	de
   0477 7E            [ 7]  794 	ld	a, (hl)
                            795 ;boot_rom.c:139: sprintf(stra, "%4d %4d", jx, jy);
   0478 6F            [ 4]  796 	ld	l, a
   0479 17            [ 4]  797 	rla
   047A 9F            [ 4]  798 	sbc	a, a
   047B 67            [ 4]  799 	ld	h, a
   047C 7B            [ 4]  800 	ld	a, e
   047D 17            [ 4]  801 	rla
   047E 9F            [ 4]  802 	sbc	a, a
   047F 57            [ 4]  803 	ld	d, a
   0480 E5            [11]  804 	push	hl
   0481 DD 6E F7      [19]  805 	ld	l, -9 (ix)
   0484 DD 66 F8      [19]  806 	ld	h, -8 (ix)
   0487 E5            [11]  807 	push	hl
   0488 FD E1         [14]  808 	pop	iy
   048A E1            [10]  809 	pop	hl
   048B C5            [11]  810 	push	bc
   048C E5            [11]  811 	push	hl
   048D D5            [11]  812 	push	de
   048E 21rEFr05      [10]  813 	ld	hl, #___str_7
   0491 E5            [11]  814 	push	hl
   0492 FD E5         [15]  815 	push	iy
   0494 CDr00r00      [17]  816 	call	_sprintf
   0497 21 08 00      [10]  817 	ld	hl, #8
   049A 39            [11]  818 	add	hl, sp
   049B F9            [ 6]  819 	ld	sp, hl
   049C C1            [10]  820 	pop	bc
                            821 ;boot_rom.c:140: write_string(stra, 0xFF, 24, y + j);
   049D DD 5E FF      [19]  822 	ld	e, -1 (ix)
   04A0 16 00         [ 7]  823 	ld	d, #0x00
   04A2 DD 6E FB      [19]  824 	ld	l, -5 (ix)
   04A5 DD 66 FC      [19]  825 	ld	h, -4 (ix)
   04A8 19            [11]  826 	add	hl, de
   04A9 DD 5E F5      [19]  827 	ld	e, -11 (ix)
   04AC DD 56 F6      [19]  828 	ld	d, -10 (ix)
   04AF C5            [11]  829 	push	bc
   04B0 E5            [11]  830 	push	hl
   04B1 21 18 00      [10]  831 	ld	hl, #0x0018
   04B4 E5            [11]  832 	push	hl
   04B5 3E FF         [ 7]  833 	ld	a, #0xff
   04B7 F5            [11]  834 	push	af
   04B8 33            [ 6]  835 	inc	sp
   04B9 D5            [11]  836 	push	de
   04BA CDr17r00      [17]  837 	call	_write_string
   04BD 21 07 00      [10]  838 	ld	hl, #7
   04C0 39            [11]  839 	add	hl, sp
   04C1 F9            [ 6]  840 	ld	sp, hl
   04C2 C1            [10]  841 	pop	bc
                            842 ;boot_rom.c:143: m <<= 1;
   04C3 CB 20         [ 8]  843 	sla	b
                            844 ;boot_rom.c:134: for (j = 0; j < 6; j++)
   04C5 DD 34 FF      [23]  845 	inc	-1 (ix)
   04C8 DD 7E FF      [19]  846 	ld	a, -1 (ix)
   04CB D6 06         [ 7]  847 	sub	a, #0x06
   04CD 38 85         [12]  848 	jr	C,00121$
                            849 ;boot_rom.c:148: m = 0b00000001;
   04CF 06 01         [ 7]  850 	ld	b, #0x01
                            851 ;boot_rom.c:150: for (j = 0; j < 6; j++)
   04D1 21 03 00      [10]  852 	ld	hl, #0x0003
   04D4 39            [11]  853 	add	hl, sp
   04D5 DD 75 F7      [19]  854 	ld	-9 (ix), l
   04D8 DD 74 F8      [19]  855 	ld	-8 (ix), h
   04DB DD 7E F7      [19]  856 	ld	a, -9 (ix)
   04DE DD 77 F5      [19]  857 	ld	-11 (ix), a
   04E1 DD 7E F8      [19]  858 	ld	a, -8 (ix)
   04E4 DD 77 F6      [19]  859 	ld	-10 (ix), a
   04E7 DD 36 FF 00   [19]  860 	ld	-1 (ix), #0x00
   04EB                     861 00123$:
                            862 ;boot_rom.c:152: char px = paddle[(j * 8)];
   04EB DD 5E FF      [19]  863 	ld	e, -1 (ix)
   04EE 16 00         [ 7]  864 	ld	d, #0x00
   04F0 6B            [ 4]  865 	ld	l, e
   04F1 62            [ 4]  866 	ld	h, d
   04F2 29            [11]  867 	add	hl, hl
   04F3 29            [11]  868 	add	hl, hl
   04F4 29            [11]  869 	add	hl, hl
   04F5 3E 00         [ 7]  870 	ld	a, #<(_paddle)
   04F7 85            [ 4]  871 	add	a, l
   04F8 6F            [ 4]  872 	ld	l, a
   04F9 3E 72         [ 7]  873 	ld	a, #>(_paddle)
   04FB 8C            [ 4]  874 	adc	a, h
   04FC 67            [ 4]  875 	ld	h, a
   04FD 6E            [ 7]  876 	ld	l, (hl)
                            877 ;boot_rom.c:153: sprintf(strp, "%4d", px);
   04FE 26 00         [ 7]  878 	ld	h, #0x00
   0500 E5            [11]  879 	push	hl
   0501 DD 6E F7      [19]  880 	ld	l, -9 (ix)
   0504 DD 66 F8      [19]  881 	ld	h, -8 (ix)
   0507 E5            [11]  882 	push	hl
   0508 FD E1         [14]  883 	pop	iy
   050A E1            [10]  884 	pop	hl
   050B C5            [11]  885 	push	bc
   050C D5            [11]  886 	push	de
   050D E5            [11]  887 	push	hl
   050E 21rF7r05      [10]  888 	ld	hl, #___str_8
   0511 E5            [11]  889 	push	hl
   0512 FD E5         [15]  890 	push	iy
   0514 CDr00r00      [17]  891 	call	_sprintf
   0517 21 06 00      [10]  892 	ld	hl, #6
   051A 39            [11]  893 	add	hl, sp
   051B F9            [ 6]  894 	ld	sp, hl
   051C D1            [10]  895 	pop	de
   051D C1            [10]  896 	pop	bc
                            897 ;boot_rom.c:154: write_string(strp, 0xFF, 6, y + j);
   051E 21 0B 00      [10]  898 	ld	hl, #0x000b
   0521 19            [11]  899 	add	hl, de
   0522 DD 5E F5      [19]  900 	ld	e, -11 (ix)
   0525 DD 56 F6      [19]  901 	ld	d, -10 (ix)
   0528 C5            [11]  902 	push	bc
   0529 E5            [11]  903 	push	hl
   052A 21 06 00      [10]  904 	ld	hl, #0x0006
   052D E5            [11]  905 	push	hl
   052E 3E FF         [ 7]  906 	ld	a, #0xff
   0530 F5            [11]  907 	push	af
   0531 33            [ 6]  908 	inc	sp
   0532 D5            [11]  909 	push	de
   0533 CDr17r00      [17]  910 	call	_write_string
   0536 21 07 00      [10]  911 	ld	hl, #7
   0539 39            [11]  912 	add	hl, sp
   053A F9            [ 6]  913 	ld	sp, hl
   053B C1            [10]  914 	pop	bc
                            915 ;boot_rom.c:155: m <<= 1;
   053C CB 20         [ 8]  916 	sla	b
                            917 ;boot_rom.c:150: for (j = 0; j < 6; j++)
   053E DD 34 FF      [23]  918 	inc	-1 (ix)
   0541 DD 7E FF      [19]  919 	ld	a, -1 (ix)
   0544 D6 06         [ 7]  920 	sub	a, #0x06
   0546 38 A3         [12]  921 	jr	C,00123$
                            922 ;boot_rom.c:160: m = 0b00000001;
   0548 06 01         [ 7]  923 	ld	b, #0x01
                            924 ;boot_rom.c:162: for (j = 0; j < 6; j++)
   054A 21 00 00      [10]  925 	ld	hl, #0x0000
   054D 39            [11]  926 	add	hl, sp
   054E DD 75 F7      [19]  927 	ld	-9 (ix), l
   0551 DD 74 F8      [19]  928 	ld	-8 (ix), h
   0554 DD 7E F7      [19]  929 	ld	a, -9 (ix)
   0557 DD 77 F5      [19]  930 	ld	-11 (ix), a
   055A DD 7E F8      [19]  931 	ld	a, -8 (ix)
   055D DD 77 F6      [19]  932 	ld	-10 (ix), a
   0560 DD 36 FF 00   [19]  933 	ld	-1 (ix), #0x00
   0564                     934 00125$:
                            935 ;boot_rom.c:164: signed char sx = spinner[(j * 16)];
   0564 DD 5E FF      [19]  936 	ld	e, -1 (ix)
   0567 16 00         [ 7]  937 	ld	d, #0x00
   0569 6B            [ 4]  938 	ld	l, e
   056A 62            [ 4]  939 	ld	h, d
   056B 29            [11]  940 	add	hl, hl
   056C 29            [11]  941 	add	hl, hl
   056D 29            [11]  942 	add	hl, hl
   056E 29            [11]  943 	add	hl, hl
   056F 3E 00         [ 7]  944 	ld	a, #<(_spinner)
   0571 85            [ 4]  945 	add	a, l
   0572 6F            [ 4]  946 	ld	l, a
   0573 3E 73         [ 7]  947 	ld	a, #>(_spinner)
   0575 8C            [ 4]  948 	adc	a, h
   0576 67            [ 4]  949 	ld	h, a
   0577 7E            [ 7]  950 	ld	a, (hl)
                            951 ;boot_rom.c:165: sprintf(strs, "%4d", sx);
   0578 6F            [ 4]  952 	ld	l, a
   0579 17            [ 4]  953 	rla
   057A 9F            [ 4]  954 	sbc	a, a
   057B 67            [ 4]  955 	ld	h, a
   057C E5            [11]  956 	push	hl
   057D DD 6E F7      [19]  957 	ld	l, -9 (ix)
   0580 DD 66 F8      [19]  958 	ld	h, -8 (ix)
   0583 E5            [11]  959 	push	hl
   0584 FD E1         [14]  960 	pop	iy
   0586 E1            [10]  961 	pop	hl
   0587 C5            [11]  962 	push	bc
   0588 D5            [11]  963 	push	de
   0589 E5            [11]  964 	push	hl
   058A 21rF7r05      [10]  965 	ld	hl, #___str_8
   058D E5            [11]  966 	push	hl
   058E FD E5         [15]  967 	push	iy
   0590 CDr00r00      [17]  968 	call	_sprintf
   0593 21 06 00      [10]  969 	ld	hl, #6
   0596 39            [11]  970 	add	hl, sp
   0597 F9            [ 6]  971 	ld	sp, hl
   0598 D1            [10]  972 	pop	de
   0599 C1            [10]  973 	pop	bc
                            974 ;boot_rom.c:166: write_string(strs, 0xFF, 7, y + j);
   059A 21 12 00      [10]  975 	ld	hl, #0x0012
   059D 19            [11]  976 	add	hl, de
   059E DD 5E F5      [19]  977 	ld	e, -11 (ix)
   05A1 DD 56 F6      [19]  978 	ld	d, -10 (ix)
   05A4 C5            [11]  979 	push	bc
   05A5 E5            [11]  980 	push	hl
   05A6 21 07 00      [10]  981 	ld	hl, #0x0007
   05A9 E5            [11]  982 	push	hl
   05AA 3E FF         [ 7]  983 	ld	a, #0xff
   05AC F5            [11]  984 	push	af
   05AD 33            [ 6]  985 	inc	sp
   05AE D5            [11]  986 	push	de
   05AF CDr17r00      [17]  987 	call	_write_string
   05B2 21 07 00      [10]  988 	ld	hl, #7
   05B5 39            [11]  989 	add	hl, sp
   05B6 F9            [ 6]  990 	ld	sp, hl
   05B7 C1            [10]  991 	pop	bc
                            992 ;boot_rom.c:167: m <<= 1;
   05B8 CB 20         [ 8]  993 	sla	b
                            994 ;boot_rom.c:162: for (j = 0; j < 6; j++)
   05BA DD 34 FF      [23]  995 	inc	-1 (ix)
   05BD DD 7E FF      [19]  996 	ld	a, -1 (ix)
   05C0 D6 06         [ 7]  997 	sub	a, #0x06
   05C2 38 A0         [12]  998 	jr	C,00125$
   05C4                     999 00108$:
                           1000 ;boot_rom.c:171: hsync_last = hsync;
   05C4 3Ar02r00      [13] 1001 	ld	a,(#_hsync + 0)
   05C7 32r03r00      [13] 1002 	ld	(#_hsync_last + 0),a
                           1003 ;boot_rom.c:172: vsync_last = vsync;
   05CA 3Ar04r00      [13] 1004 	ld	a,(#_vsync + 0)
   05CD 32r05r00      [13] 1005 	ld	(#_vsync_last + 0),a
                           1006 ;boot_rom.c:174: }
   05D0 C3r48r03      [10] 1007 	jp	00111$
   05D3                    1008 ___str_6:
   05D3 2D 2D 2D 20 4D 69  1009 	.ascii "--- MiSTer Input Tester ---"
        53 54 65 72 20 49
        6E 70 75 74 20 54
        65 73 74 65 72 20
        2D 2D 2D
   05EE 00                 1010 	.db 0x00
   05EF                    1011 ___str_7:
   05EF 25 34 64 20 25 34  1012 	.ascii "%4d %4d"
        64
   05F6 00                 1013 	.db 0x00
   05F7                    1014 ___str_8:
   05F7 25 34 64           1015 	.ascii "%4d"
   05FA 00                 1016 	.db 0x00
                           1017 	.area _CODE
                           1018 	.area _INITIALIZER
   0000                    1019 __xinit__asc_0:
   0000 30                 1020 	.db #0x30	; 48	'0'
   0001                    1021 __xinit__asc_1:
   0001 31                 1022 	.db #0x31	; 49	'1'
                           1023 	.area _CABS (ABS)
